```python
import sys
import io
import logging
import time
from threading import Thread
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import seaborn as sns

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def amplitude_of_dynamics(values):
    return np.max(values) - np.min(values)

def generate_heatmap(model_func, param1, param2, param_ranges, fixed_params, steps=20):
    p1_vals = np.linspace(*param_ranges[param1], steps)
    p2_vals = np.linspace(*param_ranges[param2], steps)
    
    amplitudes = np.zeros((steps, steps))

    for i, p1 in enumerate(p1_vals):
        for j, p2 in enumerate(p2_vals):
            params = fixed_params.copy()
            params[param1] = p1
            params[param2] = p2
            pop = model_func(params, steps=300)
            amplitudes[j, i] = amplitude_of_dynamics(pop[-100:])  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —à–∞–≥–æ–≤

    fig, ax = plt.subplots(figsize=(8, 6))
    sns.heatmap(amplitudes, xticklabels=np.round(p1_vals, 2),
                yticklabels=np.round(p2_vals, 2), cmap="viridis", ax=ax)
    ax.set_xlabel(param1)
    ax.set_ylabel(param2)
    ax.set_title("–ê–º–ø–ª–∏—Ç—É–¥–∞ –∫–æ–ª–µ–±–∞–Ω–∏–π")
    plt.xticks(rotation=45)
    st.pyplot(fig)

def simulate_unified_hybrid(params, timesteps):
    """–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    N0_vec = params["N0_vec"]
    fert_base = params["fert_base"]
    surv_base = params["surv_base"]
    K = params["K"]
    r_fert = params["r_fert"]
    r_surv = params["r_surv"]
    delay_fert = params["delay_fert"]
    delay_surv = params["delay_surv"]
    migration_rates = params["migration_rates"]
    env_effect = params["env_effect"]
    stoch_intensity = params["stoch_intensity"]
    
    r = params["r"]
    m = params["m"]
    immigration = params["immigration"]
    delay = int(params["delay"]) if params["delay"] is not None else 0
    noise_std = params["noise_std"]
    
    use_age_structure = params["use_age_structure"]
    use_density_dependence = params["use_density_dependence"]
    use_migration = params["use_migration"]
    use_noise = params["use_noise"]
    use_delay = params["use_delay"]
    use_env_effect = params["use_env_effect"]
    
    if use_age_structure:
        n = len(N0_vec)
        N = np.array(N0_vec, dtype=float)
        history = [N.copy()]
        buffer_size = max(max(delay_fert), max(delay_surv)) + 1 if use_delay else 1
        buffer = [N.copy()] * buffer_size

        for t in range(timesteps):
            N_new = np.zeros(n)
            total_pop = sum(buffer[-1])

            noise = np.random.normal(0, stoch_intensity * np.sqrt(buffer[-1] + 1)) if use_noise else 0
            
            env_factor = 1.0 + (env_effect * np.sin(t * 0.1)) if use_env_effect else 1.0

            for i in range(n):
                delayed_pop = buffer[-delay_fert[i]][i] if use_delay else buffer[-1][i]
                density_effect = np.exp(-r_fert * (total_pop / K)) if use_density_dependence else 1.0
                fertility = fert_base[i] * density_effect * env_factor
                N_new[0] += fertility * buffer[-1][i]

            for i in range(1, n):
                delayed_pop = buffer[-delay_surv[i-1]][i-1] if use_delay else buffer[-1][i-1]
                density_effect = np.exp(-r_surv * (delayed_pop / (K/n))) if use_density_dependence else 1.0
                survival = surv_base[i-1] * density_effect * env_factor
                N_new[i] += survival * buffer[-1][i-1]

            if use_migration:
                migration = np.zeros(n)
                for i in range(n):
                    outflow = buffer[-1][i] * migration_rates[i]
                    migration[i] -= outflow
                    for j in range(n):
                        if i != j:
                            migration[j] += outflow / (n-1)
                N_new += migration

            N_new = np.clip(N_new + noise, 0, None)
            buffer.append(N_new)
            if len(buffer) > buffer_size:
                buffer.pop(0)
            history.append(N_new.copy())

        return np.array(history)
    else:
        population = params["N0"]
        history = [population]
        buffer = [population] * delay if use_delay else [population]

        for t in range(1, timesteps):
            prev = buffer[-1] if use_delay else history[-1]

            growth = r * prev * (1 - prev / K) if use_density_dependence else 0
            migration = m * (immigration - population) if use_migration else 0
            noise = np.random.normal(0, noise_std) if use_noise else 0

            population += growth + migration + noise
            population = max(population, 0)
            history.append(population)

            buffer.append(population)
            if len(buffer) > delay:
                buffer.pop(0)

        return np.array(history)

def simulate_logistic(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] + r * Ns[-1] * (1 - Ns[-1] / K))
    return np.array(Ns)

def simulate_ricker(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] * np.exp(r * (1 - Ns[-1] / K)))
    return np.array(Ns)

def simulate_leslie(N0_vec: list, fertility: list, survival: list, T: int) -> np.ndarray:
    n = len(N0_vec)
    N = np.array(N0_vec, dtype=float)
    history = [N.copy()]
    L = np.zeros((n, n))
    L[0, :] = fertility
    for i in range(1, n):
        L[i, i-1] = survival[i-1]
    for _ in range(T):
        N = L.dot(N)
        history.append(N.copy())
    return np.array(history)

def simulate_delay(N0: float, r: float, K: float, T: int, tau: int) -> np.ndarray:
    Ns = [N0] * (tau + 1)
    for t in range(tau, T + tau):
        N_next = Ns[t] * np.exp(r * (1 - Ns[t - tau] / K))
        Ns.append(N_next)
    return np.array(Ns[:T + 1])

def simulate_stochastic(base_sim, *args, sigma: float = 0.1, repeats: int = 100) -> np.ndarray:
    runs = []
    progress = st.progress(0)
    for i in range(repeats):
        traj = base_sim(*args)
        noise = np.random.normal(0, sigma, size=traj.shape)
        runs.append(np.clip(traj + noise, 0, None))
        progress.progress((i + 1) / repeats)
    return np.array(runs)

def export_csv(data, filename, typem, str_data):
    if isinstance(data, np.ndarray):
        df = pd.DataFrame(data)
    else:
        df = pd.DataFrame(data)
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ CSV",
        data=csv,
        file_name=f"{filename}.csv",
        mime="text/csv"
    )
    try:
        import g4f
        response = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4,
            messages=[{"role": "user", "content": f"–í–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å. –≠—Ç–æ –Ω–µ —á–∞—Ç, —Ç—ã –ø–∏—à–µ—à—å 1 —Ä–∞–∑ –∏ –≤—Å—ë. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ Markdown, –±—É–¥—Ç–æ —Ç—ã –Ω–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –¢–∏–ø –º–æ–¥–µ–ª–∏: {typem}, –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏: {str_data}"}],
        )
        container = st.container(border=True)
        container.write("–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        container.write(response)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é g4f: {str(e)}")

st.set_page_config(page_title="–°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏", layout="wide")
st.title("üå± –°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏")

model_info = {
    "–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å": "–ò–Ω—Ç–µ–≥—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –ø–ª–æ—Ç–Ω–æ—Å—Ç–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é, –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏, —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å—é –∏ –º–∏–≥—Ä–∞—Ü–∏–µ–π.",
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Å –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é K.",
    "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞": "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–†–∏–∫–µ—Ä).",
    "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏": "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –º–∞—Ç—Ä–∏—Ü—É –õ–µ—Å–ª–∏.",
    "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π": "–ü–æ–ø—É–ª—è—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–¥–µ—Ä–∂–∫–∞ œÑ).",
    "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è": "–î–æ–±–∞–≤–ª—è–µ—Ç –≥–∞—É—Å—Å–æ–≤ —à—É–º –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∑–∞–ø—É—Å–∫–∞–º.",
}
st.sidebar.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ.")

model = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(model_info.keys()))
st.sidebar.caption(model_info[model])

st.sidebar.markdown("### –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
T = st.sidebar.number_input("–®–∞–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ (T)", min_value=1, max_value=500, value=100)

with st.expander("üî¨ –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–º–ø–ª–∏—Ç—É–¥—ã)"):
    model_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", ["–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è", "–†–∏–∫–µ—Ä–∞", "–ì–∏–±—Ä–∏–¥–Ω–∞—è"])
    param1 = st.selectbox("–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ –æ—Å–∏ X", ["r", "K"] if model_type != "–ì–∏–±—Ä–∏–¥–Ω–∞—è" else ["r_fert", "K"])
    param2 = st.selectbox("–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ –æ—Å–∏ Y", ["r", "K"] if model_type != "–ì–∏–±—Ä–∏–¥–Ω–∞—è" else ["r_surv", "K"])
    steps = st.slider("–†–∞–∑–±–∏–µ–Ω–∏–µ —Å–µ—Ç–∫–∏", 10, 50, 20)
    run_heatmap = st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É")

    if run_heatmap:
        param_ranges = {
            "r": (0.1, 3.0),
            "K": (50, 500),
            "r_fert": (0.01, 0.5),
            "r_surv": (0.01, 0.5)
        }
        if model_type == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è":
            fixed = {"r": 1.5, "K": 300, "N0": 10}
            def wrapper(params, steps=300):
                return simulate_logistic(params["N0"], params["r"], params["K"], steps)
        elif model_type == "–†–∏–∫–µ—Ä–∞":
            fixed = {"r": 1.5, "K": 300, "N0": 10}
            def wrapper(params, steps=300):
                return simulate_ricker(params["N0"], params["r"], params["K"], steps)
        elif model_type == "–ì–∏–±—Ä–∏–¥–Ω–∞—è":
            fixed = {
                "N0_vec": [10, 10, 10], "fert_base": [0.5, 0.5, 0.5], "surv_base": [0.8, 0.8],
                "K": 100, "r_fert": 0.1, "r_surv": 0.05, "delay_fert": [1, 1, 1], "delay_surv": [1, 1],
                "migration_rates": [0.1, 0.1, 0.1], "env_effect": 0.2, "stoch_intensity": 0.1,
                "use_age_structure": True, "use_density_dependence": True, "use_migration": True,
                "use_noise": True, "use_delay": True, "use_env_effect": True,
                "r": None, "m": None, "immigration": None, "delay": 0, "noise_std": None
            }
            def wrapper(params, steps=300):
                return simulate_unified_hybrid(params, steps).sum(axis=1)  # –û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å
        generate_heatmap(wrapper, param1, param2, param_ranges, fixed, steps)

if model == "–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å":
    config_params = []
    configs_count = st.sidebar.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", min_value=1, max_value=5, value=1)
    for config_idx in range(configs_count):
        with st.sidebar.expander(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{config_idx+1}", expanded=config_idx==0):
            st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
            use_age_structure = st.checkbox("–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", value=True, key=f"age_struct_{config_idx}")
            
            if use_age_structure:
                n = st.number_input("–ß–∏—Å–ª–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø", min_value=2, max_value=10, value=3, key=f"n_groups_{config_idx}")
                st.markdown("**–ù–∞—á–∞–ª—å–Ω–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å**")
                N0_vec = [st.number_input(f"üî¢ –ì—Ä—É–ø–ø–∞ {i+1}", min_value=0.0, value=10.0, key=f"N0_{i}_{config_idx}") for i in range(n)]
                st.markdown("**–†–æ–∂–¥–∞–µ–º–æ—Å—Ç—å**")
                fert_base = [st.number_input(f"üë∂ –ì—Ä—É–ø–ø–∞ {i+1}", min_value=0.0, value=0.5, key=f"fert_{i}_{config_idx}") for i in range(n)]
                st.markdown("**–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å**")
                surv_base = [st.number_input(f"üîÑ –ì—Ä—É–ø–ø–∞ {i+1}", min_value=0.0, max_value=1.0, value=0.8, key=f"surv_{i}_{config_idx}") for i in range(n-1)]
                st.markdown("**–ó–∞–¥–µ—Ä–∂–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏**")
                delay_fert = [st.number_input(f"‚è≥ –ì—Ä—É–ø–ø–∞ {i+1}", min_value=0, max_value=5, value=1, key=f"delay_fert_{i}_{config_idx}") for i in range(n)]
                delay_surv = [st.number_input(f"‚è≥ –ü–µ—Ä–µ—Ö–æ–¥ {i+1}‚Üí{i+2}", min_value=0, max_value=5, value=1, key=f"delay_surv_{i}_{config_idx}") for i in range(n-1)]
                st.markdown("**–ú–∏–≥—Ä–∞—Ü–∏—è**")
                migration_rates = [st.number_input(f"üîÑ –ì—Ä—É–ø–ø–∞ {i+1}", min_value=0.0, max_value=0.5, value=0.1, key=f"migr_{i}_{config_idx}") for i in range(n)]
            else:
                N0 = st.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è", min_value=0.0, value=10.0, key=f"N0_simple_{config_idx}")
            
            st.markdown("**–û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
            use_density_dependence = st.checkbox("–ü–ª–æ—Ç–Ω–æ—Å—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", value=True, key=f"density_{config_idx}")
            K = st.number_input("–ï–º–∫–æ—Å—Ç—å —Å—Ä–µ–¥—ã (K)", min_value=1.0, value=100.0, key=f"K_{config_idx}") if use_density_dependence else 100.0
            
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ—Å—Ç–∞**")
            if use_age_structure:
                r_fert = st.number_input("–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç—å", min_value=0.0, value=0.1, key=f"r_fert_{config_idx}")
                r_surv = st.number_input("–í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å", min_value=0.0, value=0.05, key=f"r_surv_{config_idx}")
            else:
                r = st.number_input("–¢–µ–º–ø —Ä–æ—Å—Ç–∞ (r)", min_value=0.0, value=0.1, key=f"r_{config_idx}")
            
            st.markdown("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã**")
            use_migration = st.checkbox("–ú–∏–≥—Ä–∞—Ü–∏—è", value=True, key=f"migr_flag_{config_idx}")
            if use_migration and not use_age_structure:
                m = st.number_input("–ö–æ—ç—Ñ. –º–∏–≥—Ä–∞—Ü–∏–∏", min_value=0.0, max_value=1.0, value=0.1, key=f"m_{config_idx}")
                immigration = st.number_input("–£—Ä–æ–≤–µ–Ω—å –∏–º–º–∏–≥—Ä–∞—Ü–∏–∏", min_value=0, value=50, key=f"imm_{config_idx}")
            else:
                m = None
                immigration = None
            
            use_noise = st.checkbox("–°—Ç–æ—Ö–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å", value=True, key=f"noise_{config_idx}")
            if use_noise:
                if use_age_structure:
                    stoch_intensity = st.number_input("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —à—É–º–∞", min_value=0.0, max_value=1.0, value=0.1, key=f"stoch_{config_idx}")
                    noise_std = None
                else:
                    noise_std = st.number_input("–°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —à—É–º–∞", min_value=0.0, max_value=5.0, value=0.5, key=f"noise_std_{config_idx}")
                    stoch_intensity = None
            else:
                stoch_intensity = None
                noise_std = None
            
            use_delay = st.checkbox("–ó–∞–¥–µ—Ä–∂–∫–∞", value=True, key=f"delay_{config_idx}")
            if use_delay and not use_age_structure:
                delay = st.number_input("–í–µ–ª–∏—á–∏–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∏", min_value=0, max_value=50, value=10, key=f"delay_val_{config_idx}")
            else:
                delay = 0
            
            use_env_effect = st.checkbox("–í–ª–∏—è–Ω–∏–µ —Å—Ä–µ–¥—ã", value=False, key=f"env_{config_idx}")
            if use_env_effect and use_age_structure:
                env_effect = st.slider("–°–∏–ª–∞ –≤–ª–∏—è–Ω–∏—è", -1.0, 1.0, 0.2, key=f"env_eff_{config_idx}")
            else:
                env_effect = None
            
            params = {
                "use_age_structure": use_age_structure,
                "N0": N0 if not use_age_structure else None,
                "N0_vec": N0_vec if use_age_structure else None,
                "fert_base": fert_base if use_age_structure else None,
                "surv_base": surv_base if use_age_structure else None,
                "K": K,
                "r": r if not use_age_structure else None,
                "r_fert": r_fert if use_age_structure else None,
                "r_surv": r_surv if use_age_structure else None,
                "delay_fert": delay_fert if use_age_structure else None,
                "delay_surv": delay_surv if use_age_structure else None,
                "migration_rates": migration_rates if use_age_structure else None,
                "m": m,
                "immigration": immigration,
                "delay": delay,
                "noise_std": noise_std,
                "stoch_intensity": stoch_intensity,
                "env_effect": env_effect,
                "use_density_dependence": use_density_dependence,
                "use_migration": use_migration,
                "use_noise": use_noise,
                "use_delay": use_delay,
                "use_env_effect": use_env_effect
            }
            config_params.append(params)

elif model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
    tau_values = st.sidebar.multiselect(
        "–ó–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (œÑ)",
        options=list(range(1, 11)),
        default=[1, 2]
    )
    common = {
        'N0': st.sidebar.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è N0", min_value=0.0, value=10.0),
        'r': st.sidebar.number_input("–¢–µ–º–ø —Ä–æ—Å—Ç–∞ r", min_value=0.0, value=0.1),
        'K': st.sidebar.number_input("–ï–º–∫–æ—Å—Ç—å K", min_value=1.0, value=100.0)
    }

elif model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
    n = st.sidebar.number_input("–ß–∏—Å–ª–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤", min_value=2, max_value=10, value=3)
    with st.sidebar.expander("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ (f_i)"):
        fertility = [st.number_input(f"f_{i}", min_value=0.0, value=0.5) for i in range(n)]
    with st.sidebar.expander("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è (s_i)"):
        survival = [st.number_input(f"s_{i}", min_value=0.0, max_value=1.0, value=0.8) for i in range(n-1)]
    with st.sidebar.expander("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –∫–ª–∞—Å—Å–∞–º"):
        N0_vec = [st.number_input(f"N0_{i}", min_value=0.0, value=10.0) for i in range(n)]

elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
    repeats = st.sidebar.number_input("–ß–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", min_value=1, max_value=200, value=50)
    sigma_values = st.sidebar.multiselect(
        "–ó–Ω–∞—á–µ–Ω–∏—è —à—É–º–∞ (œÉ)",
        options=[0.0, 0.05, 0.1, 0.2, 0.5],
        default=[0.1]
    )
    base_model = st.sidebar.selectbox("–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å:", ["–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç", "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞"])
    base_sim = simulate_logistic if base_model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç" else simulate_ricker
    common = {
        'N0': st.sidebar.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è N0", min_value=0.0, value=10.0),
        'r': st.sidebar.number_input("–¢–µ–º–ø —Ä–æ—Å—Ç–∞ r", min_value=0.0, value=0.1),
        'K': st.sidebar.number_input("–ï–º–∫–æ—Å—Ç—å K", min_value=1.0, value=100.0)
    }

else:
    configs_count = st.sidebar.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", min_value=1, max_value=5, value=1)
    config_params = []
    for i in range(configs_count):
        st.sidebar.markdown(f"**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{i+1}**")
        N0_i = st.sidebar.number_input(f"N0 (–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è) #{i+1}", min_value=0.0, value=10.0)
        r_i = st.sidebar.number_input(f"r (—Ç–µ–º–ø —Ä–æ—Å—Ç–∞) #{i+1}", min_value=0.0, value=0.1)
        K_i = st.sidebar.number_input(f"K (–µ–º–∫–æ—Å—Ç—å) #{i+1}", min_value=1.0, value=100.0)
        config_params.append((N0_i, r_i, K_i))

if st.sidebar.button("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"):
    with st.spinner("–°–∏–º—É–ª—è—Ü–∏—è..."):
        if model == "–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å":
            all_trajs = {}
            config_descriptions = []
            for idx, params in enumerate(config_params):
                population = simulate_unified_hybrid(params, T)
                if params["use_age_structure"]:
                    df = pd.DataFrame(population, columns=[f"–í–æ–∑—Ä–∞—Å—Ç {i}" for i in range(len(params["N0_vec"]))])
                    st.subheader(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx+1} - –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –∫–ª–∞—Å—Å–∞–º")
                    st.line_chart(df)
                    total_pop = df.sum(axis=1)
                    st.subheader(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx+1} - –û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å")
                    st.line_chart(pd.DataFrame(total_pop, columns=["–û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"]))
                    params_str = (f"–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(params['N0_vec'])} –≥—Ä—É–ø–ø\n"
                                f"K={params['K']}, r_fert={params['r_fert']}, r_surv={params['r_surv']}\n"
                                f"–§–∞–∫—Ç–æ—Ä—ã: –ø–ª–æ—Ç–Ω–æ—Å—Ç—å={params['use_density_dependence']}, "
                                f"–º–∏–≥—Ä–∞—Ü–∏—è={params['use_migration']}, —à—É–º={params['use_noise']}, "
                                f"–∑–∞–¥–µ—Ä–∂–∫–∞={params['use_delay']}, —Å—Ä–µ–¥–∞={params['use_env_effect']}")
                else:
                    df = pd.DataFrame(population, columns=["–ü–æ–ø—É–ª—è—Ü–∏—è"])
                    st.subheader(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx+1} - –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏")
                    st.line_chart(df)
                    params_str = (f"r={params['r']}, K={params['K']}\n"
                                f"–§–∞–∫—Ç–æ—Ä—ã: –ø–ª–æ—Ç–Ω–æ—Å—Ç—å={params['use_density_dependence']}, "
                                f"–º–∏–≥—Ä–∞—Ü–∏—è={params['use_migration']}, —à—É–º={params['use_noise']}, "
                                f"–∑–∞–¥–µ—Ä–∂–∫–∞={params['use_delay']}")
                all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx+1}"] = population
                config_descriptions.append(params_str)
            export_csv(all_trajs, 'unified_hybrid', '–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å',
                      f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n{'\n'.join(config_descriptions)}\n–î–∞–Ω–Ω—ã–µ:\n{all_trajs}")

        elif model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç":
            if configs_count == 1:
                traj = simulate_logistic(config_params[0][0], config_params[0][1], config_params[0][2], T)
                df = pd.DataFrame(traj, columns=["–ü–æ–ø—É–ª—è—Ü–∏—è"])
                st.subheader("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç")
                st.line_chart(df)
                export_csv(df, 'logistic_growth', '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç',
                           f"–û–¥–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è: N0={config_params[0][0]}, r={config_params[0][1]}, K={config_params[0][2]}\n–î–∞–Ω–Ω—ã–µ:\n{traj}")
            else:
                all_trajs = {}
                config_descriptions = []
                for idx, (N0_i, r_i, K_i) in enumerate(config_params):
                    traj = simulate_logistic(N0_i, r_i, K_i, T)
                    all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1} (r={r_i}, K={K_i})"] = traj
                    config_descriptions.append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1}: N0={N0_i}, r={r_i}, K={K_i}")
                df = pd.DataFrame(all_trajs)
                st.subheader("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç - –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
                st.line_chart(df)
                export_csv(df, 'logistic_growth_multiple', '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç',
                           f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:\n{'\n'.join(config_descriptions)}\n–î–∞–Ω–Ω—ã–µ:\n{all_trajs}")

        elif model == "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞":
            if configs_count == 1:
                traj = simulate_ricker(config_params[0][0], config_params[0][1], config_params[0][2], T)
                df = pd.DataFrame(traj, columns=["–ü–æ–ø—É–ª—è—Ü–∏—è"])
                st.subheader("–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞")
                st.line_chart(df)
                export_csv(df, 'ricker_model', '–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞',
                           f"–û–¥–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è: N0={config_params[0][0]}, r={config_params[0][1]}, K={config_params[0][2]}\n–î–∞–Ω–Ω—ã–µ:\n{traj}")
            else:
                all_trajs = {}
                config_descriptions = []
                for idx, (N0_i, r_i, K_i) in enumerate(config_params):
                    traj = simulate_ricker(N0_i, r_i, K_i, T)
                    all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1} (r={r_i}, K={K_i})"] = traj
                    config_descriptions.append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1}: N0={N0_i}, r={r_i}, K={K_i}")
                df = pd.DataFrame(all_trajs)
                st.subheader("–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞ - –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
                st.line_chart(df)
                export_csv(df, 'ricker_model_multiple', '–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞',
                           f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:\n{'\n'.join(config_descriptions)}\n–î–∞–Ω–Ω—ã–µ:\n{all_trajs}")

        elif model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
            if not tau_values:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ œÑ")
            else:
                all_trajs = {}
                tau_descriptions = []
                for tau_i in tau_values:
                    traj = simulate_delay(common['N0'], common['r'], common['K'], T, tau_i)
                    all_trajs[f"œÑ = {tau_i}"] = traj
                    tau_descriptions.append(
                        f"–ó–∞–¥–µ—Ä–∂–∫–∞ œÑ={tau_i} –ø—Ä–∏ N0={common['N0']}, r={common['r']}, K={common['K']}")
                df = pd.DataFrame(all_trajs)
                st.subheader("–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π - –†–∞–∑–Ω—ã–µ œÑ")
                st.line_chart(df)
                export_csv(df, 'delay_model_multiple_tau', '–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π',
                           f"–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏:\n{'\n'.join(tau_descriptions)}\n–î–∞–Ω–Ω—ã–µ:\n{all_trajs}")

        elif model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
            history = simulate_leslie(N0_vec, fertility, survival, T)
            df = pd.DataFrame(history, columns=[f"–í–æ–∑—Ä–∞—Å—Ç {i}" for i in range(n)])
            st.subheader("–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏")
            st.line_chart(df)
            L = np.zeros((n, n))
            L[0, :] = fertility
            for i in range(1, n):
                L[i, i - 1] = survival[i - 1]
            lambda_val = np.max(np.real(np.linalg.eigvals(L)))
            st.write(f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Œª = {lambda_val:.3f}")
            export_csv(df, 'leslie_matrix', '–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏', history)

        elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
            if not sigma_values:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ œÉ")
            else:
                fig, ax = plt.subplots(figsize=(10, 6))
                all_means = {}
                sigma_descriptions = []
                for sigma in sigma_values:
                    results = simulate_stochastic(
                        base_sim,
                        common['N0'],
                        common['r'],
                        common['K'],
                        T,
                        sigma=sigma,
                        repeats=repeats
                    )
                    for i in range(repeats):
                        ax.plot(results[i], alpha=0.1, linewidth=0.8)
                    mean_traj = results.mean(axis=0)
                    ax.plot(mean_traj, linewidth=2, label=f'œÉ={sigma}')
                    all_means[f"œÉ={sigma}"] = mean_traj
                    sigma_descriptions.append(f"œÉ={sigma} (N0={common['N0']}, r={common['r']}, K={common['K']})")
                ax.set_title(f"–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è ({repeats} —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ —Å–∏–≥–º—É)")
                ax.legend()
                st.pyplot(fig)
                means_df = pd.DataFrame(all_means)
                st.subheader("–°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —à—É–º–∞")
                st.line_chart(means_df)
                export_csv(means_df, 'stochastic_simulation_means', '–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å',
                           f"–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n{'\n'.join(sigma_descriptions)}\n"
                           f"–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n{all_means}\n"
                           f"–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: N0={common['N0']}, r={common['r']}, K={common['K']}")

st.sidebar.markdown("---")
st.sidebar.info("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –õ–∏–µ–π –ê—Ö–º–µ—Ç–æ–≤–æ–π")
```
