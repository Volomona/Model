import sys
import io
import logging
import time
from threading import Thread
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import time
try:
    import streamlit as st
except ModuleNotFoundError:
    sys.exit("Error: Streamlit is not available. Please install and run locally: `streamlit run app.py`.")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)




#


def simulate_hybrid(N0_vec: list, T: int,
                    fert_base: list, surv_base: list,
                    K: float, r_fert: float, r_surv: float,
                    delay_fert: list, delay_surv: list,
                    migration_rates: list = None,
                    env_effect: float = 0.0,
                    stoch_intensity: float = 0.1) -> np.ndarray:
    """
    –ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –ø–ª–æ—Ç–Ω–æ—Å—Ç–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é,
    –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏, —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å—é –∏ –º–∏–≥—Ä–∞—Ü–∏–µ–π.

    Parameters:
    -----------
    N0_vec: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –∫–ª–∞—Å—Å–∞–º
    T: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
    fert_base, surv_base: –ë–∞–∑–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ –∏ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏
    K: –ï–º–∫–æ—Å—Ç—å —Å—Ä–µ–¥—ã
    r_fert, r_surv: –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    delay_fert, delay_surv: –ó–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ –∏ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏
    migration_rates: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
    env_effect: –í–ª–∏—è–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–π —Å—Ä–µ–¥—ã (-1 –¥–æ 1)
    stoch_intensity: –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    """
    n = len(N0_vec)
    N = np.array(N0_vec, dtype=float)
    history = [N.copy()]

    # –ë—É—Ñ–µ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ (–¥–ª—è –∑–∞–¥–µ—Ä–∂–µ–∫)
    buffer_size = max(max(delay_fert), max(delay_surv)) + 1
    buffer = [N.copy()] * buffer_size

    # –ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏)
    if migration_rates is None:
        migration_rates = [0.0] * n

    total_pop = np.sum(N)

    for t in range(T):
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        N_new = np.zeros(n)
        total_pop = sum(buffer[-1])

        # –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        noise = np.random.normal(0, stoch_intensity * np.sqrt(buffer[-1] + 1))

        # –í–ª–∏—è–Ω–∏–µ —Å—Ä–µ–¥—ã (–∫–æ–ª–µ–±–ª–µ—Ç—Å—è —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ)
        env_factor = 1.0 + env_effect * np.sin(t * 0.1)

        # –†–æ–∂–¥–∞–µ–º–æ—Å—Ç—å —Å –ø–ª–æ—Ç–Ω–æ—Å—Ç–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i in range(n):
            delayed_pop = buffer[-delay_fert[i]][i]
            density_effect = np.exp(-r_fert * (total_pop / K))
            fertility = fert_base[i] * density_effect * env_factor
            N_new[0] += fertility * buffer[-1][i]

        # –í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å —Å –ø–ª–æ—Ç–Ω–æ—Å—Ç–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i in range(1, n):
            delayed_pop = buffer[-delay_surv[i-1]][i-1]
            density_effect = np.exp(-r_surv * (delayed_pop / (K/n)))
            survival = surv_base[i-1] * density_effect * env_factor
            N_new[i] += survival * buffer[-1][i-1]

        # –ú–∏–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
        migration = np.zeros(n)
        for i in range(n):
            outflow = buffer[-1][i] * migration_rates[i]
            migration[i] -= outflow
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Ç–æ–∫–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –¥—Ä—É–≥–∏–º –∫–ª–∞—Å—Å–∞–º
            for j in range(n):
                if i != j:
                    migration[j] += outflow / (n-1)

        N_new += migration

        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
        N_new = np.clip(N_new + noise, 0, None)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –∏ –∏—Å—Ç–æ—Ä–∏—é
        buffer.append(N_new)
        if len(buffer) > buffer_size:
            buffer.pop(0)

        history.append(N_new.copy())

    return np.array(history)
def simulate_logistic(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] + r * Ns[-1] * (1 - Ns[-1] / K))
    return np.array(Ns)

def simulate_ricker(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] * np.exp(r * (1 - Ns[-1] / K)))
    return np.array(Ns)

def simulate_leslie(N0_vec: list, fertility: list, survival: list, T: int) -> np.ndarray:
    n = len(N0_vec)
    N = np.array(N0_vec, dtype=float)
    history = [N.copy()]
    L = np.zeros((n, n))
    L[0, :] = fertility
    for i in range(1, n):
        L[i, i-1] = survival[i-1]
    for _ in range(T):
        N = L.dot(N)
        history.append(N.copy())
    return np.array(history)

def simulate_delay(N0: float, r: float, K: float, T: int, tau: int) -> np.ndarray:
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    Ns = [N0] * (tau + 1)
    # –°–∏–º—É–ª–∏—Ä—É–µ–º T —à–∞–≥–æ–≤
    for t in range(tau, T + tau):
        N_next = Ns[t] * np.exp(r * (1 - Ns[t - tau] / K))
        Ns.append(N_next)
    return np.array(Ns[:T + 1])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ T+1 —Ç–æ—á–µ–∫

def simulate_stochastic(base_sim, *args, sigma: float = 0.1, repeats: int = 100) -> np.ndarray:
    runs = []
    progress = st.progress(0)
    for i in range(repeats):
        traj = base_sim(*args)
        noise = np.random.normal(0, sigma, size=traj.shape)
        runs.append(np.clip(traj + noise, 0, None))
        progress.progress((i + 1) / repeats)
    return np.array(runs)

def export_csv(data, filename,typem,str):
    if isinstance(data, np.ndarray):
        df = pd.DataFrame(data)
    else:
        df = pd.DataFrame(data)
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ CSV",
        data=csv,
        file_name=f"{filename}.csv",
        mime="text/csv"
    )
    import g4f

    response = g4f.ChatCompletion.create(
        model=g4f.models.gpt_4,
        messages=[{"role": "user", "content": f"–í–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫.–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å. –≠—Ç–æ –Ω–µ —á–∞—Ç —Ç—ã –ø–∏—à–µ—à—å 1 —Ä–∞–∑ –∏ –≤—Å—ë.–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ MakrDown. –±—É–¥—Ç–æ —Ç—ã –Ω–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –¢–∏–ø –º–æ–¥–µ–ª–∏:{typem} –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏: {str}"}],
        #stream=True
    )  # alternative model setting
    container = st.container(border=True)
    container.write("–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    container.write(response)


st.set_page_config(page_title="Population Dynamics Simulator", layout="wide")
st.title("üå± –°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏")

model_info = {
    "–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å": "–ò–Ω—Ç–µ–≥—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –ø–ª–æ—Ç–Ω–æ—Å—Ç–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é, –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏, —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.",
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Å –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é K.",
    "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞": "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–†–∏–∫–µ—Ä).",
    "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏": "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –º–∞—Ç—Ä–∏—Ü—É –õ–µ—Å–ª–∏.",
    "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π": "–ü–æ–ø—É–ª—è—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–¥–µ—Ä–∂–∫–∞ œÑ).",
    "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è": "–î–æ–±–∞–≤–ª—è–µ—Ç –≥–∞—É—Å—Å–æ–≤ —à—É–º –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∑–∞–ø—É—Å–∫–∞–º.",
}
st.sidebar.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ.")

model = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(model_info.keys()))
st.sidebar.caption(model_info[model])

st.sidebar.markdown("### –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
T = st.sidebar.number_input("–®–∞–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ (T)", min_value=1, max_value=500, value=100)

common = {}
if model != "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
    common['N0'] = st.sidebar.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è N0", min_value=0.0, value=10.0)
    common['r'] = st.sidebar.number_input("–¢–µ–º–ø —Ä–æ—Å—Ç–∞ r", min_value=0.0, value=0.1)
    common['K'] = st.sidebar.number_input("–ï–º–∫–æ—Å—Ç—å K", min_value=1.0, value=100.0)

if model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
    tau_values = st.sidebar.multiselect(
        "–ó–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (œÑ)",
        options=list(range(1, 11)),
        default=[1, 2]
    )
elif model == "–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å":
    n = st.sidebar.number_input(
        "–ß–∏—Å–ª–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø",
        min_value=2,
        max_value=10,
        value=3,
        help="–ù–∞–ø—Ä–∏–º–µ—Ä: 3 –≥—Ä—É–ø–ø—ã = –º–æ–ª–æ–¥—ã–µ/–≤–∑—Ä–æ—Å–ª—ã–µ/—Å—Ç–∞—Ä—ã–µ"
    )

    with st.sidebar.expander("–ù–∞—á–∞–ª—å–Ω–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"):
        st.markdown("""
            <div style="color: #666; font-size:0.9rem; margin-bottom:10px;">
            –°–∫–æ–ª—å–∫–æ –æ—Å–æ–±–µ–π –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –≤ –Ω–∞—á–∞–ª–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            </div>
            """, unsafe_allow_html=True)
        N0_vec = [
            st.number_input(
                f"üî¢ –ì—Ä—É–ø–ø–∞ {i + 1} (–º–æ–ª–æ–¥—ã–µ)" if i == 0 else
                f"üî¢ –ì—Ä—É–ø–ø–∞ {i + 1} (–≤–∑—Ä–æ—Å–ª—ã–µ)" if i == 1 else
                f"üî¢ –ì—Ä—É–ø–ø–∞ {i + 1} (—Å—Ç–∞—Ä—ã–µ)",
                min_value=0.0,
                value=10.0
            ) for i in range(n)
        ]

    with st.sidebar.expander("–†–æ–∂–¥–∞–µ–º–æ—Å—Ç—å"):
        st.markdown("""
            <div style="color: #666; font-size:0.9rem; margin-bottom:10px;">
            –°–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–º–∫–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ–¥–Ω–∞ –æ—Å–æ–±—å –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            </div>
            """, unsafe_allow_html=True)
        fert_base = [
            st.number_input(
                f"üë∂ –î–µ—Ç–µ–π –Ω–∞ 1 –æ—Å–æ–±—å –≥—Ä—É–ø–ø—ã {i + 1}",
                min_value=0.0,
                value=0.5,
                help=f"–ù–∞–ø—Ä–∏–º–µ—Ä: 0.5 = 1 –æ—Å–æ–±—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 0.5 –ø–æ—Ç–æ–º–∫–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º"
            ) for i in range(n)
        ]

    with st.sidebar.expander("–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å"):
        st.markdown("""
            <div style="color: #666; font-size:0.9rem; margin-bottom:10px;">
            –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–ª–µ–¥—É—é—â—É—é –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É
            </div>
            """, unsafe_allow_html=True)
        surv_base = [
            st.number_input(
                f"üîÑ –ì—Ä—É–ø–ø–∞ {i + 1} ‚Üí –ì—Ä—É–ø–ø–∞ {i + 2}",
                min_value=0.0,
                max_value=1.0,
                value=0.8,
                help=f"0.8 = 80% –æ—Å–æ–±–µ–π –ø–µ—Ä–µ–π–¥—É—Ç –≤ —Å–ª–µ–¥—É—é—â—É—é –≥—Ä—É–ø–ø—É"
            ) for i in range(n - 1)
        ]

    with st.sidebar.expander("–ó–∞–¥–µ—Ä–∂–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏"):
        st.markdown("""
            <div style="color: #666; font-size:0.9rem; margin-bottom:10px;">
            –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç—å —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            </div>
            """, unsafe_allow_html=True)
        delay_fert = [
            st.number_input(
                f"‚è≥ –ì—Ä—É–ø–ø–∞ {i + 1} (—à–∞–≥–æ–≤)",
                min_value=0,
                max_value=5,
                value=1,
                help="0 = –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è, 1 = —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —á–µ—Ä–µ–∑ 1 —à–∞–≥"
            ) for i in range(n)
        ]

    with st.sidebar.expander("–ó–∞–¥–µ—Ä–∂–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏"):
        st.markdown("""
            <div style="color: #666; font-size:0.9rem; margin-bottom:10px;">
            –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            </div>
            """, unsafe_allow_html=True)
        delay_surv = [
            st.number_input(
                f"‚è≥ –ü–µ—Ä–µ—Ö–æ–¥ {i + 1}‚Üí{i + 2} (—à–∞–≥–æ–≤)",
                min_value=0,
                max_value=5,
                value=1
            ) for i in range(n - 1)
        ]

    with st.sidebar.expander("–ú–∏–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏"):
        st.markdown("""
            <div style="color: #666; font-size:0.9rem; margin-bottom:10px;">
            –ö–∞–∫–∞—è –¥–æ–ª—è –æ—Å–æ–±–µ–π –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã –∫–∞–∂–¥—ã–π —à–∞–≥
            </div>
            """, unsafe_allow_html=True)
        migration_rates = [
            st.number_input(
                f"üîÑ –ì—Ä—É–ø–ø–∞ {i + 1} (–¥–æ–ª—è –º–∏–≥—Ä–∞–Ω—Ç–æ–≤)",
                min_value=0.0,
                max_value=0.5,
                value=0.1,
                help="0.1 = 10% –æ—Å–æ–±–µ–π —É–π–¥—É—Ç –≤ –¥—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã"
            ) for i in range(n)
        ]

    st.sidebar.markdown("---")
    K = st.sidebar.number_input(
        "üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å (K)",
        min_value=1.0,
        value=100.0,
        help="–ü—Ä–µ–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–µ–¥–∞ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å"
    )
    r_fert = st.sidebar.number_input(
        "üìâ –í–ª–∏—è–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç—å",
        min_value=0.0,
        value=0.1,
        help="–ß–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –ø–∞–¥–∞–µ—Ç —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç—å –ø—Ä–∏ —Ä–æ—Å—Ç–µ –ø–æ–ø—É–ª—è—Ü–∏–∏"
    )
    r_surv = st.sidebar.number_input(
        "üìâ –í–ª–∏—è–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å",
        min_value=0.0,
        value=0.05,
        help="–ß–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –ø–∞–¥–∞–µ—Ç –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –ø—Ä–∏ —Ä–æ—Å—Ç–µ –ø–æ–ø—É–ª—è—Ü–∏–∏"
    )
    env_effect = st.sidebar.slider(
        "üå°Ô∏è –í–ª–∏—è–Ω–∏–µ —Å—Ä–µ–¥—ã",
        min_value=-1.0,
        max_value=1.0,
        value=0.2,
        help="-1: –∫—Ä–∏–∑–∏—Å, 0: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ, +1: –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
    )
    stoch_intensity = st.sidebar.slider(
        "üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è",
        min_value=0.0,
        max_value=1.0,
        value=0.1,
        help="0: –Ω–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏, 1: —Å–∏–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    )
elif model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
    n = st.sidebar.number_input("–ß–∏—Å–ª–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤", min_value=2, max_value=10, value=3)
    with st.sidebar.expander("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ (f_i)"):
        fertility = [st.number_input(f"f_{i}", min_value=0.0, value=0.5) for i in range(n)]
    with st.sidebar.expander("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è (s_i)"):
        survival = [st.number_input(f"s_{i}", min_value=0.0, max_value=1.0, value=0.8) for i in range(n-1)]
    with st.sidebar.expander("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –∫–ª–∞—Å—Å–∞–º"):
        N0_vec = [st.number_input(f"N0_{i}", min_value=0.0, value=10.0) for i in range(n)]

elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
    repeats = st.sidebar.number_input("–ß–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", min_value=1, max_value=200, value=50)
    sigma_values = st.sidebar.multiselect(
        "–ó–Ω–∞—á–µ–Ω–∏—è —à—É–º–∞ (œÉ)",
        options=[0.0, 0.05, 0.1, 0.2, 0.5],
        default=[0.1]
    )
    base_model = st.sidebar.selectbox("–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å:", ["–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç", "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞"])
    base_sim = simulate_logistic if base_model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç" else simulate_ricker

else:
    configs_count = st.sidebar.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", min_value=1, max_value=5, value=1)
    config_params = []
    for i in range(configs_count):
        st.sidebar.markdown(f"**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{i+1}**")
        N0_i = st.sidebar.number_input(f"N0 (–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è) #{i+1}", min_value=0.0, value=10.0)
        r_i = st.sidebar.number_input(f"r (—Ç–µ–º–ø —Ä–æ—Å—Ç–∞) #{i+1}", min_value=0.0, value=0.1)
        K_i = st.sidebar.number_input(f"K (–µ–º–∫–æ—Å—Ç—å) #{i+1}", min_value=1.0, value=100.0)
        config_params.append((N0_i, r_i, K_i))

if st.sidebar.button("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"):
    with st.spinner("–°–∏–º—É–ª—è—Ü–∏—è..."):
        if model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç":
            if configs_count == 1:
                traj = simulate_logistic(config_params[0][0], config_params[0][1], config_params[0][2], T)
                df = pd.DataFrame(traj, columns=["–ü–æ–ø—É–ª—è—Ü–∏—è"])
                st.subheader("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç")
                st.line_chart(df)
                export_csv(df, 'logistic_growth', '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç',
                           f"–û–¥–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è: N0={config_params[0][0]}, r={config_params[0][1]}, K={config_params[0][2]}\n–î–∞–Ω–Ω—ã–µ:\n{traj}")
            else:
                all_trajs = {}
                config_descriptions = []
                for idx, (N0_i, r_i, K_i) in enumerate(config_params):
                    traj = simulate_logistic(N0_i, r_i, K_i, T)
                    all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1} (r={r_i}, K={K_i})"] = traj
                    config_descriptions.append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1}: N0={N0_i}, r={r_i}, K={K_i}")
                df = pd.DataFrame(all_trajs)
                st.subheader("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç - –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
                st.line_chart(df)
                export_csv(df, 'logistic_growth_multiple', '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç',
                           f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:\n{'\n'.join(config_descriptions)}\n–î–∞–Ω–Ω—ã–µ:\n{all_trajs}")
        elif model == "–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å":
            history = simulate_hybrid(
                N0_vec, T, fert_base, surv_base, K,
                r_fert, r_surv, delay_fert, delay_surv,
                migration_rates, env_effect, stoch_intensity
            )
            df = pd.DataFrame(history, columns=[f"–í–æ–∑—Ä–∞—Å—Ç {i}" for i in range(n)])

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.subheader("–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å - –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –∫–ª–∞—Å—Å–∞–º")
            st.line_chart(df)

            # –û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ø—É–ª—è—Ü–∏–∏
            total_pop = df.sum(axis=1)
            st.subheader("–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å - –û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ø—É–ª—è—Ü–∏–∏")
            st.line_chart(pd.DataFrame(total_pop, columns=["–û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"]))

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            params_str = (f"–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {n}, K={K}, r_fert={r_fert}, r_surv={r_surv}, "
                        f"env_effect={env_effect}, stoch_intensity={stoch_intensity}\n"
                        f"fert_base={fert_base}, surv_base={surv_base}\n"
                        f"delay_fert={delay_fert}, delay_surv={delay_surv}\n"
                        f"migration_rates={migration_rates}")

            export_csv(df, 'hybrid_model', '–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å', params_str)


        elif model == "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞":
            if configs_count == 1:
                traj = simulate_ricker(config_params[0][0], config_params[0][1], config_params[0][2], T)
                df = pd.DataFrame(traj, columns=["–ü–æ–ø—É–ª—è—Ü–∏—è"])
                st.subheader("–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞")
                st.line_chart(df)
                export_csv(df, 'ricker_model', '–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞',
                           f"–û–¥–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è: N0={config_params[0][0]}, r={config_params[0][1]}, K={config_params[0][2]}\n–î–∞–Ω–Ω—ã–µ:\n{traj}")
            else:
                all_trajs = {}
                config_descriptions = []
                for idx, (N0_i, r_i, K_i) in enumerate(config_params):
                    traj = simulate_ricker(N0_i, r_i, K_i, T)
                    all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1} (r={r_i}, K={K_i})"] = traj
                    config_descriptions.append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1}: N0={N0_i}, r={r_i}, K={K_i}")
                df = pd.DataFrame(all_trajs)
                st.subheader("–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞ - –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
                st.line_chart(df)
                export_csv(df, 'ricker_model_multiple', '–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞',
                           f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:\n{'\n'.join(config_descriptions)}\n–î–∞–Ω–Ω—ã–µ:\n{all_trajs}")


        elif model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
            if not tau_values:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ œÑ")
            else:
                all_trajs = {}
                tau_descriptions = []
                for tau_i in tau_values:
                    traj = simulate_delay(common['N0'], common['r'], common['K'], T, tau_i)
                    all_trajs[f"œÑ = {tau_i}"] = traj
                    tau_descriptions.append(
                        f"–ó–∞–¥–µ—Ä–∂–∫–∞ œÑ={tau_i} –ø—Ä–∏ N0={common['N0']}, r={common['r']}, K={common['K']}")
                df = pd.DataFrame(all_trajs)
                st.subheader("–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π - –†–∞–∑–Ω—ã–µ œÑ")
                st.line_chart(df)
                export_csv(df, 'delay_model_multiple_tau', '–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π',
                           f"–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏:\n{'\n'.join(tau_descriptions)}\n–î–∞–Ω–Ω—ã–µ:\n{all_trajs}")

        elif model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
            history = simulate_leslie(N0_vec, fertility, survival, T)
            df = pd.DataFrame(history, columns=[f"–í–æ–∑—Ä–∞—Å—Ç {i}" for i in range(n)])
            st.subheader("–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏")
            st.line_chart(df)
            L = np.zeros((n, n))
            L[0, :] = fertility
            for i in range(1, n):
                L[i, i - 1] = survival[i - 1]
            lambda_val = np.max(np.real(np.linalg.eigvals(L)))
            st.write(f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Œª = {lambda_val:.3f}")
            export_csv(df, 'leslie_matrix','–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏',history)


        elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
            if not sigma_values:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ œÉ")
            else:
                fig, ax = plt.subplots(figsize=(10, 6))
                all_means = {}
                sigma_descriptions = []
                for sigma in sigma_values:
                    results = simulate_stochastic(
                        base_sim,
                        common['N0'],
                        common['r'],
                        common['K'],
                        T,
                        sigma=sigma,
                        repeats=repeats
                    )
                    for i in range(repeats):
                        ax.plot(results[i], alpha=0.1, linewidth=0.8)
                    mean_traj = results.mean(axis=0)
                    ax.plot(mean_traj, linewidth=2, label=f'œÉ={sigma}')
                    all_means[f"œÉ={sigma}"] = mean_traj
                    sigma_descriptions.append(f"œÉ={sigma} (N0={common['N0']}, r={common['r']}, K={common['K']})")
                ax.set_title(f"–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è ({repeats} —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ —Å–∏–≥–º—É)")
                ax.legend()
                st.pyplot(fig)
                means_df = pd.DataFrame(all_means)
                st.subheader("–°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —à—É–º–∞")
                st.line_chart(means_df)
                export_csv(means_df, 'stochastic_simulation_means', '–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å',
                           f"–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n{'\n'.join(sigma_descriptions)}\n"
                           f"–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n{all_means}\n"
                           f"–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: N0={common['N0']}, r={common['r']}, K={common['K']}")


# Footer
st.sidebar.markdown("---")
st.sidebar.info("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –õ–∏–µ–π –ê—Ö–º–µ—Ç–æ–≤–æ–π")
