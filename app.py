import sys
import io
import logging

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

try:
    import streamlit as st
except ModuleNotFoundError:
    sys.exit("Error: Streamlit is not available. Please install and run locally: `streamlit run app.py`.")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==== Simulation functions ==== #
def simulate_logistic(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] + r * Ns[-1] * (1 - Ns[-1] / K))
    return np.array(Ns)

def simulate_ricker(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] * np.exp(r * (1 - Ns[-1] / K)))
    return np.array(Ns)

def simulate_leslie(N0_vec: list, fertility: list, survival: list, T: int) -> np.ndarray:
    n = len(N0_vec)
    N = np.array(N0_vec, dtype=float)
    history = [N.copy()]
    L = np.zeros((n, n))
    L[0, :] = fertility
    for i in range(1, n):
        L[i, i-1] = survival[i-1]
    for _ in range(T):
        N = L.dot(N)
        history.append(N.copy())
    return np.array(history)

def simulate_delay(N0: float, r: float, K: float, T: int, tau: int) -> np.ndarray:
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    Ns = [N0] * (tau + 1)
    # –°–∏–º—É–ª–∏—Ä—É–µ–º T —à–∞–≥–æ–≤
    for t in range(tau, T + tau):
        N_next = Ns[t] * np.exp(r * (1 - Ns[t - tau] / K))
        Ns.append(N_next)
    return np.array(Ns[:T + 1])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ T+1 —Ç–æ—á–µ–∫

def simulate_stochastic(base_sim, *args, sigma: float = 0.1, repeats: int = 100) -> np.ndarray:
    runs = []
    progress = st.progress(0)
    for i in range(repeats):
        traj = base_sim(*args)
        noise = np.random.normal(0, sigma, size=traj.shape)
        runs.append(np.clip(traj + noise, 0, None))
        progress.progress((i + 1) / repeats)
    return np.array(runs)

def export_csv(data, filename):
    if isinstance(data, np.ndarray):
        df = pd.DataFrame(data)
    else:
        df = pd.DataFrame(data)
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ CSV",
        data=csv,
        file_name=f"{filename}.csv",
        mime="text/csv"
    )

# ==== Streamlit UI ==== #
st.set_page_config(page_title="Population Dynamics Simulator", layout="wide")
st.title("üå± –°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏")

model_info = {
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Å –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é K.",
    "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞": "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–†–∏–∫–µ—Ä).",
    "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏": "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –º–∞—Ç—Ä–∏—Ü—É –õ–µ—Å–ª–∏.",
    "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π": "–ü–æ–ø—É–ª—è—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–¥–µ—Ä–∂–∫–∞ œÑ).",
    "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è": "–î–æ–±–∞–≤–ª—è–µ—Ç –≥–∞—É—Å—Å–æ–≤ —à—É–º –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∑–∞–ø—É—Å–∫–∞–º.",
}
st.sidebar.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ.")

model = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(model_info.keys()))
st.sidebar.caption(model_info[model])

st.sidebar.markdown("### –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
T = st.sidebar.number_input("–®–∞–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ (T)", min_value=1, max_value=500, value=100)

common = {}
if model != "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
    common['N0'] = st.sidebar.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è N0", min_value=0.0, value=10.0)
    common['r'] = st.sidebar.number_input("–¢–µ–º–ø —Ä–æ—Å—Ç–∞ r", min_value=0.0, value=0.1)
    common['K'] = st.sidebar.number_input("–ï–º–∫–æ—Å—Ç—å K", min_value=1.0, value=100.0)

if model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
    tau_values = st.sidebar.multiselect(
        "–ó–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (œÑ)",
        options=list(range(1, 11)),
        default=[1, 2]
    )

elif model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
    n = st.sidebar.number_input("–ß–∏—Å–ª–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤", min_value=2, max_value=10, value=3)
    with st.sidebar.expander("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ (f_i)"):
        fertility = [st.number_input(f"f_{i}", min_value=0.0, value=0.5) for i in range(n)]
    with st.sidebar.expander("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è (s_i)"):
        survival = [st.number_input(f"s_{i}", min_value=0.0, max_value=1.0, value=0.8) for i in range(n-1)]
    with st.sidebar.expander("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –∫–ª–∞—Å—Å–∞–º"):
        N0_vec = [st.number_input(f"N0_{i}", min_value=0.0, value=10.0) for i in range(n)]

elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
    repeats = st.sidebar.number_input("–ß–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", min_value=1, max_value=200, value=50)
    sigma_values = st.sidebar.multiselect(
        "–ó–Ω–∞—á–µ–Ω–∏—è —à—É–º–∞ (œÉ)",
        options=[0.0, 0.05, 0.1, 0.2, 0.5],
        default=[0.1]
    )
    base_model = st.sidebar.selectbox("–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å:", ["–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç", "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞"])
    base_sim = simulate_logistic if base_model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç" else simulate_ricker

else:
    configs_count = st.sidebar.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", min_value=1, max_value=5, value=1)
    config_params = []
    for i in range(configs_count):
        st.sidebar.markdown(f"**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{i+1}**")
        N0_i = st.sidebar.number_input(f"N0 (–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è) #{i+1}", min_value=0.0, value=10.0)
        r_i = st.sidebar.number_input(f"r (—Ç–µ–º–ø —Ä–æ—Å—Ç–∞) #{i+1}", min_value=0.0, value=0.1)
        K_i = st.sidebar.number_input(f"K (–µ–º–∫–æ—Å—Ç—å) #{i+1}", min_value=1.0, value=100.0)
        config_params.append((N0_i, r_i, K_i))

if st.sidebar.button("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"):
    with st.spinner("–°–∏–º—É–ª—è—Ü–∏—è..."):
        if model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç":
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if configs_count == 1:
                traj = simulate_logistic(config_params[0][0], config_params[0][1], config_params[0][2], T)
                df = pd.DataFrame(traj, columns=["–ü–æ–ø—É–ª—è—Ü–∏—è"])
                st.subheader("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç")
                st.line_chart(df)
                export_csv(df, 'logistic_growth')
            else:
                all_trajs = {}
                for idx, (N0_i, r_i, K_i) in enumerate(config_params):
                    traj = simulate_logistic(N0_i, r_i, K_i, T)
                    all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx+1} (r={r_i}, K={K_i})"] = traj
                df = pd.DataFrame(all_trajs)
                st.subheader("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç - –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
                st.line_chart(df)
                export_csv(df, 'logistic_growth_multiple')

        elif model == "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞":
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if configs_count == 1:
                traj = simulate_ricker(config_params[0][0], config_params[0][1], config_params[0][2], T)
                df = pd.DataFrame(traj, columns=["–ü–æ–ø—É–ª—è—Ü–∏—è"])
                st.subheader("–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞")
                st.line_chart(df)
                export_csv(df, 'ricker_model')
            else:
                all_trajs = {}
                for idx, (N0_i, r_i, K_i) in enumerate(config_params):
                    traj = simulate_ricker(N0_i, r_i, K_i, T)
                    all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx+1} (r={r_i}, K={K_i})"] = traj
                df = pd.DataFrame(all_trajs)
                st.subheader("–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞ - –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
                st.line_chart(df)
                export_csv(df, 'ricker_model_multiple')

        elif model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
            if not tau_values:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ œÑ")
            else:
                all_trajs = {}
                for tau_i in tau_values:
                    traj = simulate_delay(common['N0'], common['r'], common['K'], T, tau_i)
                    all_trajs[f"œÑ = {tau_i}"] = traj
                df = pd.DataFrame(all_trajs)
                st.subheader("–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π - –†–∞–∑–Ω—ã–µ œÑ")
                st.line_chart(df)
                export_csv(df, 'delay_model_multiple_tau')

        elif model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
            history = simulate_leslie(N0_vec, fertility, survival, T)
            df = pd.DataFrame(history, columns=[f"–í–æ–∑—Ä–∞—Å—Ç {i}" for i in range(n)])
            st.subheader("–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏")
            st.line_chart(df)
            L = np.zeros((n, n))
            L[0, :] = fertility
            for i in range(1, n):
                L[i, i-1] = survival[i-1]
            lambda_val = np.max(np.real(np.linalg.eigvals(L)))
            st.write(f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Œª = {lambda_val:.3f}")
            export_csv(df, 'leslie_matrix')

        elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
            if not sigma_values:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ œÉ")
            else:
                # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π + —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                fig, ax = plt.subplots(figsize=(10, 6))
                all_means = {}
                
                for sigma in sigma_values:
                    results = simulate_stochastic(
                        base_sim,
                        common['N0'],
                        common['r'],
                        common['K'],
                        T,
                        sigma=sigma,
                        repeats=repeats
                    )
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
                    for i in range(repeats):
                        ax.plot(results[i], alpha=0.1, linewidth=0.8)
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    mean_traj = results.mean(axis=0)
                    ax.plot(mean_traj, linewidth=2, label=f'œÉ={sigma}')
                    all_means[f"œÉ={sigma}"] = mean_traj
                
                ax.set_title(f"–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è ({repeats} —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ —Å–∏–≥–º—É)")
                ax.set_xlabel("–í—Ä–µ–º—è")
                ax.set_ylabel("–ü–æ–ø—É–ª—è—Ü–∏—è")
                ax.legend()
                ax.grid(True, alpha=0.3)
                st.pyplot(fig)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ Streamlit
                st.subheader("–°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —à—É–º–∞")
                means_df = pd.DataFrame(all_means)
                st.line_chart(means_df)
                
                # –≠–∫—Å–ø–æ—Ä—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                export_csv(means_df, 'stochastic_simulation_means')

# Footer
st.sidebar.markdown("---")
st.sidebar.info("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –õ–∏–µ–π –ê—Ö–º–µ—Ç–æ–≤–æ–π ‚Äî v1.2")
