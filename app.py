# -------------------------------
# Streamlit UI
# -------------------------------
import streamlit as st
import sys
import logging
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import g4f
from sensitivity import sensitivity_heatmap
from analysis import analyze_behavior, optimize_parameters
from report import generate_pdf_report

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Streamlit
try:
    import streamlit as st
except ModuleNotFoundError:
    sys.exit("Error: Streamlit is not available. Please install and run locally: `streamlit run app.py`.")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Population Dynamics Simulator", layout="wide")
st.title("üå± –°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏ —Å –ê–Ω–∞–ª–∏–∑–æ–º")

# –§—É–Ω–∫—Ü–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
# ... (–∑–¥–µ—Å—å –≤–∞—à–∏ simulate_logistic, simulate_ricker, simulate_leslie, simulate_delay, simulate_stochastic)

# –°–ª–æ–≤–∞—Ä—å –º–æ–¥–µ–ª–µ–π
models = {
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç": simulate_logistic,
    "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞": simulate_ricker,
    "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏": lambda N0, r, K, T: simulate_leslie(N0_vec, fertility, survival, T),
    "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π": simulate_delay,
    "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è": simulate_stochastic
}

# Sidebar: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
model_name = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(models.keys()))
T = st.sidebar.slider("–®–∞–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ (T)", 10, 500, 100, key='T')
N0 = st.sidebar.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è N0", 0.0, 1000.0, 10.0, key='N0')
r = st.sidebar.number_input("–¢–µ–º–ø —Ä–æ—Å—Ç–∞ r", 0.0, 5.0, 0.5, key='r')
K = st.sidebar.number_input("–ï–º–∫–æ—Å—Ç—å —Å—Ä–µ–¥—ã K", 1.0, 1000.0, 100.0, key='K')

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.subheader("–î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
if model_name == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
    tau = st.sidebar.number_input("–ó–∞–¥–µ—Ä–∂–∫–∞ œÑ", 1, 10, 2, key='tau')
elif model_name == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
    sigma = st.sidebar.number_input("œÉ (–¥–ª—è —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–π)", 0.0, 1.0, 0.1, key='sigma')
    repeats = st.sidebar.number_input("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–¥–ª—è —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–π)", 1, 200, 50, key='repeats')
elif model_name == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
    n = st.sidebar.number_input("–ß–∏—Å–ª–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤", 2, 10, 3, key='n')
    fertility = [st.sidebar.number_input(f"f_{i}", 0.0, 1.0, 0.5, key=f'fert_{i}') for i in range(n)]
    survival = [st.sidebar.number_input(f"s_{i}", 0.0, 1.0, 0.8, key=f'surv_{i}') for i in range(n-1)]
    N0_vec = [st.sidebar.number_input(f"N0_{i}", 0.0, 1000.0, 10.0, key=f'N0_{i}_vec') for i in range(n)]

# –ó–∞–≥—Ä—É–∑–∫–∞ CSV –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
uploaded = st.sidebar.file_uploader("CSV –¥–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", type=["csv"], key='uploader')

# –ö–Ω–æ–ø–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
if st.sidebar.button("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å", key='simulate'):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º args –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
    if model_name == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
        ts = models[model_name](N0, r, K, T, tau)
    elif model_name == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
        ts = models[model_name](simulate_logistic, N0, r, K, T, sigma=sigma, repeats=repeats)
    elif model_name == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
        ts = models[model_name](N0, r, K, T)
    else:
        ts = models[model_name](N0, r, K, T)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
    st.session_state.ts = ts
    st.session_state.model = model_name

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if 'ts' in st.session_state:
    ts = st.session_state.ts
    st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {st.session_state.model}")
    # –ì—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots()
    ax.plot(ts if ts.ndim==1 else ts)
    st.pyplot(fig)

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
    mode = analyze_behavior(ts.flatten())
    st.write(f"–†–µ–∂–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏—è: {mode}")

    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
    csv = pd.DataFrame(ts).to_csv(index=False).encode('utf-8')
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ CSV",
        data=csv,
        file_name=f"{st.session_state.model}.csv",
        mime="text/csv",
        key='download_csv'
    )

    # GPT-4 –∞–Ω–∞–ª–∏–∑
    if st.sidebar.button("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑ GPT-4", key='gpt4_analysis'):
        snippet = str(ts.flatten()[:10]) + "..." if ts.size > 10 else str(ts.flatten())
        messages = [
            {"role": "user", "content": (
                f"–í—ã - –Ω–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏.\n"
                f"–¢–∏–ø –º–æ–¥–µ–ª–∏: {st.session_state.model}\n"
                f"–î–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 10 —Ç–æ—á–µ–∫): {snippet}"
            )}
        ]
        response = g4f.ChatCompletion.create(model=g4f.models.gpt_4, messages=messages)
        st.subheader("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö GPT-4:")
        st.write(response)

    # –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", key='sens'):
        fig_sens = sensitivity_heatmap(
            models[st.session_state.model],
            {'r': (0.1,1.0,20), 'K': (50,200,20)},
            {'N0': N0, 'r': r, 'K': K},
            T
        )
        st.subheader("–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∞–º–ø–ª–∏—Ç—É–¥–∞)")
        st.pyplot(fig_sens)

    # –ü–æ–¥–≥–æ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if uploaded is not None:
        df = pd.read_csv(uploaded)
        data = df.iloc[:,1].values if df.shape[1]>1 else df.iloc[:,0].values
        res = optimize_parameters(
            models[st.session_state.model], data,
            initial_guess=[N0, r, K],
            bounds=[(0,None),(0,None),(0,None)],
            T=T
        )
        st.subheader("–ü–æ–¥–≥–æ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        st.write(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ: N0={res.x[0]:.2f}, r={res.x[1]:.2f}, K={res.x[2]:.2f}")

    # –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á—ë—Ç
    if st.sidebar.button("–°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á—ë—Ç", key='pdf_report'):
        path = generate_pdf_report(st.session_state.model, ts)
        st.success(f"–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")

st.sidebar.markdown("---")
st.sidebar.info("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –õ–∏–µ–π –ê—Ö–º–µ—Ç–æ–≤–æ–π")
