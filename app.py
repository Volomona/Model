import sys
import logging

import numpy as np
import pandas as pd

# Streamlit import with exit if unavailable
try:
    import streamlit as st
except ModuleNotFoundError:
    sys.exit("Error: Streamlit is not available. Please install and run locally: `streamlit run app.py`.")

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==== Simulation functions ==== #
def simulate_logistic(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] + r * Ns[-1] * (1 - Ns[-1] / K))
    return np.array(Ns)

def simulate_ricker(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] * np.exp(r * (1 - Ns[-1] / K)))
    return np.array(Ns)

def simulate_leslie(N0_vec: list, fertility: list, survival: list, T: int) -> np.ndarray:
    n = len(N0_vec)
    N = np.array(N0_vec, dtype=float)
    history = [N.copy()]
    L = np.zeros((n, n))
    L[0, :] = fertility
    for i in range(1, n):
        L[i, i-1] = survival[i-1]
    for _ in range(T):
        N = L.dot(N)
        history.append(N.copy())
    return np.array(history)

def simulate_delay(N0: float, r: float, K: float, T: int, tau: int) -> np.ndarray:
    Ns = [N0] * (tau + 1)
    for t in range(tau, T + tau):
        Ns.append(Ns[t] * np.exp(r * (1 - Ns[t - tau] / K)))
    return np.array(Ns)

def simulate_stochastic(base_sim, N0: float, r: float, K: float, T: int,
                        sigma: float = 0.1, repeats: int = 100) -> np.ndarray:
    runs = []
    progress = st.progress(0)
    for i in range(repeats):
        traj = base_sim(N0, r, K, T)
        noise = np.random.normal(0, sigma, size=traj.shape)
        runs.append(np.clip(traj + noise, 0, None))
        progress.progress((i + 1) / repeats)
    return np.array(runs)

# ==== Streamlit UI ==== #
st.set_page_config(page_title="Population Dynamics Simulator", layout="wide")
st.title("üå± –°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏")

model_info = {
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Å –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é K.",
    "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞": "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–†–∏–∫–µ—Ä).",
    "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏": "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –º–∞—Ç—Ä–∏—Ü—É –õ–µ—Å–ª–∏.",
    "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π": "–ü–æ–ø—É–ª—è—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–¥–µ—Ä–∂–∫–∞ œÑ).",
    "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è": "–î–æ–±–∞–≤–ª—è–µ—Ç –≥–∞—É—Å—Å–æ–≤ —à—É–º –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∑–∞–ø—É—Å–∫–∞–º.",
}
st.sidebar.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ.")

model = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(model_info.keys()))
st.sidebar.caption(model_info[model])

st.sidebar.markdown("### –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
T = st.sidebar.number_input("–®–∞–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ (T)", min_value=1, max_value=500, value=100)

# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
num_configs = st.sidebar.number_input("–ß–∏—Å–ª–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", min_value=1, max_value=10, value=1)

configs = []

if model != "–ú–æ–¥–µ–ª—å –õ Leslie":
    for i in range(num_configs):
        st.sidebar.markdown(f"---\n### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1}")
        N0 = st.sidebar.number_input(f"–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è N0 (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1})", min_value=0.0, value=10.0, key=f"N0_{i}")
        r = st.sidebar.number_input(f"–¢–µ–º–ø —Ä–æ—Å—Ç–∞ r (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1})", min_value=0.0, value=0.1, key=f"r_{i}")
        K = st.sidebar.number_input(f"–ï–º–∫–æ—Å—Ç—å K (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1})", min_value=1.0, value=100.0, key=f"K_{i}")

        config = {'N0': N0, 'r': r, 'K': K}

        if model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
            tau = st.sidebar.slider(f"–ó–∞–¥–µ—Ä–∂–∫–∞ (œÑ) (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1})", min_value=1, max_value=10, value=1, key=f"tau_{i}")
            config['tau'] = tau

        if model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
            sigma = st.sidebar.slider(f"–®—É–º (œÉ) (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1})", min_value=0.0, max_value=1.0, value=0.1, key=f"sigma_{i}")
            repeats = st.sidebar.number_input(f"–ß–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1})", min_value=1, max_value=200, value=100, key=f"repeats_{i}")
            base_model = st.sidebar.selectbox(f"–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1})", ["Logistic", "Ricker"], key=f"base_model_{i}")
            config['sigma'] = sigma
            config['repeats'] = repeats
            config['base_model'] = base_model

        configs.append(config)

elif model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
    n = st.sidebar.number_input("–ß–∏—Å–ª–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤", min_value=2, max_value=10, value=3)
    with st.sidebar.expander("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ (f_i)"):
        fertility = [st.number_input(f"f_{i}", min_value=0.0, value=0.5) for i in range(n)]
    with st.sidebar.expander("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è (s_i)"):
        survival = [st.number_input(f"s_{i}", min_value=0.0, max_value=1.0, value=0.8) for i in range(n-1)]
    with st.sidebar.expander("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –∫–ª–∞—Å—Å–∞–º"):
        N0_vec = [st.number_input(f"N0_{i}", min_value=0.0, value=10.0) for i in range(n)]

if st.sidebar.button("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"):
    with st.spinner("–°–∏–º—É–ª—è—Ü–∏—è..."):
        if model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç":
            st.subheader("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            all_trajs = {}
            for i, conf in enumerate(configs):
                traj = simulate_logistic(conf['N0'], conf['r'], conf['K'], T)
                all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1}"] = traj
            df = pd.DataFrame(all_trajs)
            st.line_chart(df)
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", data=csv,
                               file_name="logistic_growth_multiple_configs.csv", mime="text/csv")

        elif model == "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞":
            st.subheader("–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞ ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            all_trajs = {}
            for i, conf in enumerate(configs):
                traj = simulate_ricker(conf['N0'], conf['r'], conf['K'], T)
                all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1}"] = traj
            df = pd.DataFrame(all_trajs)
            st.line_chart(df)
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", data=csv,
                               file_name="ricker_model_multiple_configs.csv", mime="text/csv")

        elif model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
            st.subheader("–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            all_trajs = {}
            for i, conf in enumerate(configs):
                traj = simulate_delay(conf['N0'], conf['r'], conf['K'], T, conf['tau'])
                all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1}"] = traj
            df = pd.DataFrame(all_trajs)
            st.line_chart(df)
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", data=csv,
                               file_name="delay_model_multiple_configs.csv", mime="text/csv")

        elif model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
            history = simulate_leslie(N0_vec, fertility, survival, T)
            df = pd.DataFrame(history, columns=[f"–í–æ–∑—Ä–∞—Å—Ç {i}" for i in range(n)])
            st.subheader("–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏")
            st.line_chart(df)
            L = np.zeros((n, n))
            L[0, :] = fertility
            for i in range(1, n):
                L[i, i-1] = survival[i-1]
            lambda_val = np.max(np.real(np.linalg.eigvals(L)))
            st.write(f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Œª = {lambda_val:.3f}")
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV", data=csv, file_name="leslie_model.csv", mime="text/csv")

        elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
            st.subheader("–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            all_means = {}
            for i, conf in enumerate(configs):
                base_func = simulate_logistic if conf['base_model'] == "Logistic" else simulate_ricker
                runs = simulate_stochastic(base_func, conf['N0'], conf['r'], conf['K'], T,
                                          sigma=conf['sigma'], repeats=conf['repeats'])
                mean_traj = np.mean(runs, axis=0)
                all_means[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1}"] = mean_traj
            df = pd.DataFrame(all_means)
            st.line_chart(df)
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", data=csv,
                               file_name="stochastic_model_multiple_configs.csv", mime="text/csv")

else:
    st.info("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å' –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")

# Footer
st.sidebar.markdown("---")
st.sidebar.info("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –õ–∏–µ–π –ê—Ö–º–µ—Ç–æ–≤–æ–π ‚Äî v1.0")
