import sys
import io
import logging
import time
from threading import Thread
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import time
try:
    import streamlit as st
except ModuleNotFoundError:
    sys.exit("Error: Streamlit is not available. Please install and run locally: `streamlit run app.py`.")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def simulate_hybrid(N0_vec: list, T: int,
                    fert_base: list, surv_base: list,
                    K: float, r_fert: float, r_surv: float,
                    delay_fert: list, delay_surv: list,
                    migration_rates: list = None,
                    env_effect: float = 0.0,
                    stoch_intensity: float = 0.1) -> np.ndarray:
    """–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    n = len(N0_vec)
    N = np.array(N0_vec, dtype=float)
    history = [N.copy()]

    buffer_size = max(max(delay_fert), max(delay_surv)) + 1
    buffer = [N.copy()] * buffer_size

    if migration_rates is None:
        migration_rates = [0.0] * n

    total_pop = np.sum(N)

    for t in range(T):
        N_new = np.zeros(n)
        total_pop = sum(buffer[-1])

        noise = np.random.normal(0, stoch_intensity * np.sqrt(buffer[-1] + 1))
        env_factor = 1.0 + env_effect * np.sin(t * 0.1)

        for i in range(n):
            delayed_pop = buffer[-delay_fert[i]][i]
            density_effect = np.exp(-r_fert * (total_pop / K))
            fertility = fert_base[i] * density_effect * env_factor
            N_new[0] += fertility * buffer[-1][i]

        for i in range(1, n):
            delayed_pop = buffer[-delay_surv[i-1]][i-1]
            density_effect = np.exp(-r_surv * (delayed_pop / (K/n)))
            survival = surv_base[i-1] * density_effect * env_factor
            N_new[i] += survival * buffer[-1][i-1]

        migration = np.zeros(n)
        for i in range(n):
            outflow = buffer[-1][i] * migration_rates[i]
            migration[i] -= outflow
            for j in range(n):
                if i != j:
                    migration[j] += outflow / (n-1)

        N_new += migration
        N_new = np.clip(N_new + noise, 0, None)

        buffer.append(N_new)
        if len(buffer) > buffer_size:
            buffer.pop(0)

        history.append(N_new.copy())

    return np.array(history)

def simulate_hybrid_model(params, timesteps, use_density_dependence=True, use_migration=True, use_noise=True, use_delay=True):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏"""
    r = params["r"]
    K = params["K"]
    m = params["m"]
    immigration = params["immigration"]
    delay = int(params["delay"])
    noise_std = params["noise_std"]
    population = params["N0"]
    history = [population]

    if use_delay:
        buffer = [population] * delay
    else:
        buffer = [population]

    for t in range(1, timesteps):
        prev = buffer[-1] if use_delay else history[-1]

        growth = r * prev * (1 - prev / K) if use_density_dependence else 0
        migration = m * (immigration - population) if use_migration else 0
        noise = np.random.normal(0, noise_std) if use_noise else 0

        population += growth + migration + noise
        population = max(population, 0)
        history.append(population)

        buffer.append(population)
        if len(buffer) > delay:
            buffer.pop(0)

    return np.array(history)

def simulate_logistic(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] + r * Ns[-1] * (1 - Ns[-1] / K))
    return np.array(Ns)

def simulate_ricker(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] * np.exp(r * (1 - Ns[-1] / K)))
    return np.array(Ns)

def simulate_leslie(N0_vec: list, fertility: list, survival: list, T: int) -> np.ndarray:
    n = len(N0_vec)
    N = np.array(N0_vec, dtype=float)
    history = [N.copy()]
    L = np.zeros((n, n))
    L[0, :] = fertility
    for i in range(1, n):
        L[i, i-1] = survival[i-1]
    for _ in range(T):
        N = L.dot(N)
        history.append(N.copy())
    return np.array(history)

def simulate_delay(N0: float, r: float, K: float, T: int, tau: int) -> np.ndarray:
    Ns = [N0] * (tau + 1)
    for t in range(tau, T + tau):
        N_next = Ns[t] * np.exp(r * (1 - Ns[t - tau] / K))
        Ns.append(N_next)
    return np.array(Ns[:T + 1])

def simulate_stochastic(base_sim, *args, sigma: float = 0.1, repeats: int = 100) -> np.ndarray:
    runs = []
    progress = st.progress(0)
    for i in range(repeats):
        traj = base_sim(*args)
        noise = np.random.normal(0, sigma, size=traj.shape)
        runs.append(np.clip(traj + noise, 0, None))
        progress.progress((i + 1) / repeats)
    return np.array(runs)

def export_csv(data, filename, typem, str):
    if isinstance(data, np.ndarray):
        df = pd.DataFrame(data)
    else:
        df = pd.DataFrame(data)
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ CSV",
        data=csv,
        file_name=f"{filename}.csv",
        mime="text/csv"
    )
    import g4f

    response = g4f.ChatCompletion.create(
        model=g4f.models.gpt_4,
        messages=[{"role": "user", "content": f"–í–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫.–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å. –≠—Ç–æ –Ω–µ —á–∞—Ç —Ç—ã –ø–∏—à–µ—à—å 1 —Ä–∞–∑ –∏ –≤—Å—ë.–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ MakrDown. –±—É–¥—Ç–æ —Ç—ã –Ω–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –¢–∏–ø –º–æ–¥–µ–ª–∏:{typem} –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏: {str}"}],
    )
    container = st.container(border=True)
    container.write("–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    container.write(response)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="Population Dynamics Simulator", layout="wide")
st.title("üå± –°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏")

model_info = {
    "–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å": "–ò–Ω—Ç–µ–≥—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π",
    "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å": "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏",
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
    "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞": "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏",
    "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏": "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–µ—Ä–µ–∑ –º–∞—Ç—Ä–∏—Ü—É –õ–µ—Å–ª–∏",
    "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π": "–ü–æ–ø—É–ª—è—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
    "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è": "–î–æ–±–∞–≤–ª—è–µ—Ç –≥–∞—É—Å—Å–æ–≤ —à—É–º –∫ –∑–∞–ø—É—Å–∫–∞–º",
}

st.sidebar.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ.")
model = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(model_info.keys()))
st.sidebar.caption(model_info[model])

st.sidebar.markdown("### –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
T = st.sidebar.number_input("–®–∞–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ (T)", min_value=1, max_value=500, value=100)

common = {}
if model not in ["–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏", "–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å", "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å"]:
    common['N0'] = st.sidebar.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è N0", min_value=0.0, value=10.0)
    common['r'] = st.sidebar.number_input("–¢–µ–º–ø —Ä–æ—Å—Ç–∞ r", min_value=0.0, value=0.1)
    common['K'] = st.sidebar.number_input("–ï–º–∫–æ—Å—Ç—å K", min_value=1.0, value=100.0)

if model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
    tau_values = st.sidebar.multiselect(
        "–ó–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (œÑ)",
        options=list(range(1, 11)),
        default=[1, 2]
    )
elif model == "–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å":
    n = st.sidebar.number_input("–ß–∏—Å–ª–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø", min_value=2, max_value=10, value=3)
    with st.sidebar.expander("–ù–∞—á–∞–ª—å–Ω–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"):
        N0_vec = [st.number_input(f"üî¢ –ì—Ä—É–ø–ø–∞ {i+1}", min_value=0.0, value=10.0) for i in range(n)]
    with st.sidebar.expander("–†–æ–∂–¥–∞–µ–º–æ—Å—Ç—å"):
        fert_base = [st.number_input(f"üë∂ –ì—Ä—É–ø–ø–∞ {i+1}", min_value=0.0, value=0.5) for i in range(n)]
    with st.sidebar.expander("–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å"):
        surv_base = [st.number_input(f"üîÑ –ì—Ä—É–ø–ø–∞ {i+1}", min_value=0.0, max_value=1.0, value=0.8) for i in range(n-1)]
    with st.sidebar.expander("–ó–∞–¥–µ—Ä–∂–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏"):
        delay_fert = [st.number_input(f"‚è≥ –ì—Ä—É–ø–ø–∞ {i+1}", min_value=0, max_value=5, value=1) for i in range(n)]
        delay_surv = [st.number_input(f"‚è≥ –ü–µ—Ä–µ—Ö–æ–¥ {i+1}‚Üí{i+2}", min_value=0, max_value=5, value=1) for i in range(n-1)]
    with st.sidebar.expander("–ú–∏–≥—Ä–∞—Ü–∏—è"):
        migration_rates = [st.number_input(f"üîÑ –ì—Ä—É–ø–ø–∞ {i+1}", min_value=0.0, max_value=0.5, value=0.1) for i in range(n)]
    
    K = st.sidebar.number_input("üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å (K)", min_value=1.0, value=100.0)
    r_fert = st.sidebar.number_input("üìâ –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç—å", min_value=0.0, value=0.1)
    r_surv = st.sidebar.number_input("üìâ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å", min_value=0.0, value=0.05)
    env_effect = st.sidebar.slider("üå°Ô∏è –í–ª–∏—è–Ω–∏–µ —Å—Ä–µ–¥—ã", -1.0, 1.0, 0.2)
    stoch_intensity = st.sidebar.slider("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è", 0.0, 1.0, 0.1)

elif model == "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å":
    st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
    r = st.sidebar.slider("r (—Ç–µ–º–ø —Ä–æ—Å—Ç–∞)", 0.0, 4.0, 1.5, 0.1)
    K = st.sidebar.slider("K (—ë–º–∫–æ—Å—Ç—å —Å—Ä–µ–¥—ã)", 10, 500, 100, 10)
    m = st.sidebar.slider("m (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∏–≥—Ä–∞—Ü–∏–∏)", 0.0, 1.0, 0.1, 0.05)
    immigration = st.sidebar.slider("–ò–º–º–∏–≥—Ä–∞—Ü–∏—è", 0, 500, 50, 10)
    delay = st.sidebar.slider("–ó–∞–¥–µ—Ä–∂–∫–∞ (—à–∞–≥–∏)", 0, 50, 10)
    noise_std = st.sidebar.slider("–°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —à—É–º–∞", 0.0, 5.0, 0.5, 0.1)
    N0 = st.sidebar.slider("–ù–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ", 0, 500, 10)
    
    st.sidebar.header("–§–∞–∫—Ç–æ—Ä—ã –º–æ–¥–µ–ª–∏")
    use_density_dependence = st.sidebar.checkbox("–ü–ª–æ—Ç–Ω–æ—Å—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", value=True)
    use_migration = st.sidebar.checkbox("–ú–∏–≥—Ä–∞—Ü–∏—è", value=True)
    use_noise = st.sidebar.checkbox("–°—Ç–æ—Ö–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å", value=True)
    use_delay = st.sidebar.checkbox("–ó–∞–¥–µ—Ä–∂–∫–∞", value=True)

elif model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
    n = st.sidebar.number_input("–ß–∏—Å–ª–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤", min_value=2, max_value=10, value=3)
    with st.sidebar.expander("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏"):
        fertility = [st.number_input(f"f_{i}", min_value=0.0, value=0.5) for i in range(n)]
    with st.sidebar.expander("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è"):
        survival = [st.number_input(f"s_{i}", min_value=0.0, max_value=1.0, value=0.8) for i in range(n-1)]
    with st.sidebar.expander("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è"):
        N0_vec = [st.number_input(f"N0_{i}", min_value=0.0, value=10.0) for i in range(n)]

elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
    repeats = st.sidebar.number_input("–ß–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π", min_value=1, max_value=200, value=50)
    sigma_values = st.sidebar.multiselect(
        "–ó–Ω–∞—á–µ–Ω–∏—è —à—É–º–∞ (œÉ)",
        options=[0.0, 0.05, 0.1, 0.2, 0.5],
        default=[0.1]
    )
    base_model = st.sidebar.selectbox("–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å:", ["–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç", "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞"])
    base_sim = simulate_logistic if base_model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç" else simulate_ricker

else:
    configs_count = st.sidebar.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", min_value=1, max_value=5, value=1)
    config_params = []
    for i in range(configs_count):
        st.sidebar.markdown(f"**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{i+1}**")
        N0_i = st.sidebar.number_input(f"N0 #{i+1}", min_value=0.0, value=10.0)
        r_i = st.sidebar.number_input(f"r #{i+1}", min_value=0.0, value=0.1)
        K_i = st.sidebar.number_input(f"K #{i+1}", min_value=1.0, value=100.0)
        config_params.append((N0_i, r_i, K_i))

if st.sidebar.button("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"):
    with st.spinner("–°–∏–º—É–ª—è—Ü–∏—è..."):
        if model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç":
            if configs_count == 1:
                traj = simulate_logistic(config_params[0][0], config_params[0][1], config_params[0][2], T)
                df = pd.DataFrame(traj, columns=["–ü–æ–ø—É–ª—è—Ü–∏—è"])
                st.subheader("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç")
                st.line_chart(df)
                export_csv(df, 'logistic_growth', '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç',
                           f"–û–¥–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è: N0={config_params[0][0]}, r={config_params[0][1]}, K={config_params[0][2]}\n–î–∞–Ω–Ω—ã–µ:\n{traj}")
            else:
                all_trajs = {}
                config_descriptions = []
                for idx, (N0_i, r_i, K_i) in enumerate(config_params):
                    traj = simulate_logistic(N0_i, r_i, K_i, T)
                    all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1} (r={r_i}, K={K_i})"] = traj
                    config_descriptions.append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1}: N0={N0_i}, r={r_i}, K={K_i}")
                df = pd.DataFrame(all_trajs)
                st.subheader("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç - –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
                st.line_chart(df)
                export_csv(df, 'logistic_growth_multiple', '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç',
                           f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:\n{'\n'.join(config_descriptions)}\n–î–∞–Ω–Ω—ã–µ:\n{all_trajs}")

        elif model == "–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å":
            history = simulate_hybrid(
                N0_vec, T, fert_base, surv_base, K,
                r_fert, r_surv, delay_fert, delay_surv,
                migration_rates, env_effect, stoch_intensity
            )
            df = pd.DataFrame(history, columns=[f"–í–æ–∑—Ä–∞—Å—Ç {i}" for i in range(n)])
            st.subheader("–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å - –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –∫–ª–∞—Å—Å–∞–º")
            st.line_chart(df)
            total_pop = df.sum(axis=1)
            st.subheader("–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å - –û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ø—É–ª—è—Ü–∏–∏")
            st.line_chart(pd.DataFrame(total_pop, columns=["–û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å"]))
            params_str = (f"–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {n}, K={K}, r_fert={r_fert}, r_surv={r_surv}, "
                        f"env_effect={env_effect}, stoch_intensity={stoch_intensity}\n"
                        f"fert_base={fert_base}, surv_base={surv_base}\n"
                        f"delay_fert={delay_fert}, delay_surv={delay_surv}\n"
                        f"migration_rates={migration_rates}")
            export_csv(df, 'hybrid_model', '–ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å', params_str)

        elif model == "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å":
            params = {
                "r": r,
                "K": K,
                "m": m,
                "immigration": immigration,
                "delay": delay,
                "noise_std": noise_std,
                "N0": N0,
            }
            population = simulate_hybrid_model(
                params,
                T,
                use_density_dependence=use_density_dependence,
                use_migration=use_migration,
                use_noise=use_noise,
                use_delay=use_delay
            )
            df = pd.DataFrame(population, columns=["–ü–æ–ø—É–ª—è—Ü–∏—è"])
            st.subheader("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å")
            st.line_chart(df)
            params_str = (f"r={r}, K={K}, m={m}, immigration={immigration}, delay={delay}, "
                        f"noise_std={noise_std}, N0={N0}\n"
                        f"–§–∞–∫—Ç–æ—Ä—ã: –ø–ª–æ—Ç–Ω–æ—Å—Ç—å={use_density_dependence}, –º–∏–≥—Ä–∞—Ü–∏—è={use_migration}, "
                        f"—à—É–º={use_noise}, –∑–∞–¥–µ—Ä–∂–∫–∞={use_delay}")
            export_csv(df, 'alternative_hybrid_model', '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å', params_str)

        elif model == "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞":
            if configs_count == 1:
                traj = simulate_ricker(config_params[0][0], config_params[0][1], config_params[0][2], T)
                df = pd.DataFrame(traj, columns=["–ü–æ–ø—É–ª—è—Ü–∏—è"])
                st.subheader("–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞")
                st.line_chart(df)
                export_csv(df, 'ricker_model', '–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞',
                           f"–û–¥–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è: N0={config_params[0][0]}, r={config_params[0][1]}, K={config_params[0][2]}\n–î–∞–Ω–Ω—ã–µ:\n{traj}")
            else:
                all_trajs = {}
                config_descriptions = []
                for idx, (N0_i, r_i, K_i) in enumerate(config_params):
                    traj = simulate_ricker(N0_i, r_i, K_i, T)
                    all_trajs[f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1} (r={r_i}, K={K_i})"] = traj
                    config_descriptions.append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{idx + 1}: N0={N0_i}, r={r_i}, K={K_i}")
                df = pd.DataFrame(all_trajs)
                st.subheader("–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞ - –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
                st.line_chart(df)
                export_csv(df, 'ricker_model_multiple', '–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞',
                           f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:\n{'\n'.join(config_descriptions)}\n–î–∞–Ω–Ω—ã–µ:\n{all_trajs}")

        elif model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
            if not tau_values:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ œÑ")
            else:
                all_trajs = {}
                tau_descriptions = []
                for tau_i in tau_values:
                    traj = simulate_delay(common['N0'], common['r'], common['K'], T, tau_i)
                    all_trajs[f"œÑ = {tau_i}"] = traj
                    tau_descriptions.append(
                        f"–ó–∞–¥–µ—Ä–∂–∫–∞ œÑ={tau_i} –ø—Ä–∏ N0={common['N0']}, r={common['r']}, K={common['K']}")
                df = pd.DataFrame(all_trajs)
                st.subheader("–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π - –†–∞–∑–Ω—ã–µ œÑ")
                st.line_chart(df)
                export_csv(df, 'delay_model_multiple_tau', '–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π',
                           f"–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏:\n{'\n'.join(tau_descriptions)}\n–î–∞–Ω–Ω—ã–µ:\n{all_trajs}")

        elif model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
            history = simulate_leslie(N0_vec, fertility, survival, T)
            df = pd.DataFrame(history, columns=[f"–í–æ–∑—Ä–∞—Å—Ç {i}" for i in range(n)])
            st.subheader("–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏")
            st.line_chart(df)
            L = np.zeros((n, n))
            L[0, :] = fertility
            for i in range(1, n):
                L[i, i - 1] = survival[i - 1]
            lambda_val = np.max(np.real(np.linalg.eigvals(L)))
            st.write(f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Œª = {lambda_val:.3f}")
            export_csv(df, 'leslie_matrix','–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏',history)

        elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
            if not sigma_values:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ œÉ")
            else:
                fig, ax = plt.subplots(figsize=(10, 6))
                all_means = {}
                sigma_descriptions = []
                for sigma in sigma_values:
                    results = simulate_stochastic(
                        base_sim,
                        common['N0'],
                        common['r'],
                        common['K'],
                        T,
                        sigma=sigma,
                        repeats=repeats
                    )
                    for i in range(repeats):
                        ax.plot(results[i], alpha=0.1, linewidth=0.8)
                    mean_traj = results.mean(axis=0)
                    ax.plot(mean_traj, linewidth=2, label=f'œÉ={sigma}')
                    all_means[f"œÉ={sigma}"] = mean_traj
                    sigma_descriptions.append(f"œÉ={sigma} (N0={common['N0']}, r={common['r']}, K={common['K']}")
                ax.set_title(f"–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è ({repeats} —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ —Å–∏–≥–º—É)")
                ax.legend()
                st.pyplot(fig)
                means_df = pd.DataFrame(all_means)
                st.subheader("–°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —à—É–º–∞")
                st.line_chart(means_df)
                export_csv(means_df, 'stochastic_simulation_means', '–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å',
                           f"–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n{'\n'.join(sigma_descriptions)}\n"
                           f"–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n{all_means}\n"
                           f"–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: N0={common['N0']}, r={common['r']}, K={common['K']}")

st.sidebar.markdown("---")
st.sidebar.info("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –õ–∏–µ–π –ê—Ö–º–µ—Ç–æ–≤–æ–π")
