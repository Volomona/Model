import sys
import io
import logging
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Streamlit
try:
    import streamlit as st
except ModuleNotFoundError:
    sys.exit("–û—à–∏–±–∫–∞: Streamlit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: `streamlit run app.py`")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ================== –§–£–ù–ö–¶–ò–ò –°–ò–ú–£–õ–Ø–¶–ò–ò –° –ö–≠–®–ò–†–û–í–ê–ù–ò–ï–ú ================== #

@st.cache_data(max_entries=5)
def simulate_logistic(N0: float, r: float, K: float, T: int) -> np.ndarray:
    """–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    Ns = np.zeros(T + 1)
    Ns[0] = N0
    try:
        for t in range(T):
            next_N = Ns[t] + r * Ns[t] * (1 - Ns[t] / K)
            if next_N < 0 or np.isnan(next_N):
                return Ns[:t+1]
            Ns[t+1] = next_N
        return Ns
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")
        return np.array([N0])

@st.cache_data(max_entries=5)
def simulate_ricker(N0: float, r: float, K: float, T: int) -> np.ndarray:
    """–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    Ns = np.zeros(T + 1)
    Ns[0] = N0
    try:
        for t in range(T):
            next_N = Ns[t] * np.exp(r * (1 - Ns[t] / K))
            if next_N < 0 or np.isnan(next_N):
                return Ns[:t+1]
            Ns[t+1] = next_N
        return Ns
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ –†–∏–∫–µ—Ä–∞: {str(e)}")
        return np.array([N0])

@st.cache_data(max_entries=5)
def simulate_leslie(N0_vec: list, fertility: list, survival: list, T: int) -> np.ndarray:
    """–ú–∞—Ç—Ä–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å –õ–µ—Å–ª–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    try:
        validate_leslie_params(survival, fertility)
        
        n = len(N0_vec)
        N = np.array(N0_vec, dtype=float)
        history = [N.copy()]
        
        L = np.zeros((n, n))
        L[0, :] = fertility
        for i in range(1, n):
            L[i, i-1] = survival[i-1]
            
        for _ in range(T):
            N = L.dot(N)
            N = np.clip(N, 0, None)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            history.append(N.copy())
        return np.array(history)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ –õ–µ—Å–ª–∏: {str(e)}")
        return np.array([N0_vec])

@st.cache_data(max_entries=5)
def simulate_delay(N0: float, r: float, K: float, T: int, tau: int) -> np.ndarray:
    """–ú–æ–¥–µ–ª—å —Å –∑–∞–ø–∞–∑–¥—ã–≤–∞–Ω–∏–µ–º"""
    try:
        Ns = np.zeros(T + tau + 1)
        Ns[:tau+1] = N0
        for t in range(tau, T + tau):
            next_N = Ns[t] * np.exp(r * (1 - Ns[t - tau] / K))
            if next_N < 0 or np.isnan(next_N):
                return Ns[:t+1]
            Ns[t+1] = next_N
        return Ns[tau:]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ —Å –∑–∞–ø–∞–∑–¥—ã–≤–∞–Ω–∏–µ–º: {str(e)}")
        return np.array([N0])

def simulate_stochastic(base_sim, *args, sigma: float = 0.1, repeats: int = 100) -> np.ndarray:
    """–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    try:
        base_traj = base_sim(*args)
        repeats = min(repeats, 500)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∑–∞—â–∏—Ç—ã
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        noise = np.random.normal(0, sigma, size=(repeats, len(base_traj)))
        results = np.clip(base_traj + noise, a_min=0, a_max=None)
        
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")
        return np.array([base_sim(*args)])

# ================== –í–ê–õ–ò–î–ê–¶–ò–Ø ================== #

def validate_leslie_params(survival: list, fertility: list):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ –õ–µ—Å–ª–∏"""
    if sum(survival) > 1.0:
        raise ValueError("–°—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≤—ã–∂–∏–≤–∞–Ω–∏—è > 1.0")
    if any(f < 0 for f in fertility):
        raise ValueError("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ < 0")
    if any(s < 0 or s > 1 for s in survival):
        raise ValueError("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è –≤–Ω–µ [0,1]")

# ================== –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ================== #

def plot_and_export(data, title, log_scale=False):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º"""
    fig, ax = plt.subplots(figsize=(10, 6))
    
    if data.ndim == 1:
        ax.plot(data, label='–û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è', linewidth=2)
    else:
        for i in range(min(data.shape[0], 100)):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ª–∏–Ω–∏–π
            ax.plot(data[i], alpha=0.1, color='blue', 
                   label='–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏' if i == 0 else "")
        ax.plot(np.nanmean(data, axis=0), color='red', 
               linewidth=2, label='–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    
    ax.set_title(title, fontsize=14)
    ax.set_xlabel('–í—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥', fontsize=12)
    ax.set_ylabel('–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏', fontsize=12)
    
    if log_scale:
        ax.set_yscale('log')
        ax.set_ylim(bottom=1e-1)
    
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.legend()
    
    st.pyplot(fig)
    
    # –≠–∫—Å–ø–æ—Ä—Ç PNG
    buf = io.BytesIO()
    fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
    buf.seek(0)
    st.download_button(
        "–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)", 
        data=buf, 
        file_name=f"{title.replace(' ', '_')}.png", 
        mime="image/png"
    )
    
    # –≠–∫—Å–ø–æ—Ä—Ç CSV –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if data.ndim == 1:
        df = pd.DataFrame(data, columns=['Population'])
    else:
        df = pd.DataFrame(data.T)
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        "–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)", 
        data=csv, 
        file_name=f"{title.replace(' ', '_')}.csv", 
        mime="text/csv"
    )

# ================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–° ================== #

st.set_page_config(
    page_title="–°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏", 
    layout="wide",
    page_icon="üå±"
)
st.title("üå± –°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
model_info = {
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å –µ–º–∫–æ—Å—Ç—å—é K",
    "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞": "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏",
    "–ú–∞—Ç—Ä–∏—Ü–∞ –õ–µ—Å–ª–∏": "–í–æ–∑—Ä–∞—Å—Ç–Ω–æ-—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å",
    "–ú–æ–¥–µ–ª—å —Å –∑–∞–ø–∞–∑–¥—ã–≤–∞–Ω–∏–µ–º": "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–º",
    "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è": "–ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ —Å —à—É–º–æ–º"
}

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
model = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", 
    list(model_info.keys()),
    help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"
)
st.sidebar.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {model_info[model]}")

# –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
T = st.sidebar.slider(
    "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–≥–∏ (T)", 
    min_value=1, max_value=500, value=100,
    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏"
)

common_params = {}
if model != "–ú–∞—Ç—Ä–∏—Ü–∞ –õ–µ—Å–ª–∏":
    common_params['N0'] = st.sidebar.number_input(
        "–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è (N0)", 
        min_value=0.0, value=10.0, step=1.0
    )
    common_params['r'] = st.sidebar.number_input(
        "–°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ (r)", 
        min_value=0.0, value=0.5, step=0.1,
        help="–ë–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞"
    )
    common_params['K'] = st.sidebar.number_input(
        "–ï–º–∫–æ—Å—Ç—å —Å—Ä–µ–¥—ã (K)", 
        min_value=1.0, value=100.0, step=10.0,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è"
    )
    
    if model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç" and common_params.get('r', 0) > 3.0:
        st.sidebar.warning(
            "–í—ã—Å–æ–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞ (r > 3) –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ö–∞–æ—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ!"
        )

# –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π
if model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–ø–∞–∑–¥—ã–≤–∞–Ω–∏–µ–º":
    tau = st.sidebar.slider(
        "–ó–∞–ø–∞–∑–¥—ã–≤–∞–Ω–∏–µ (œÑ)", 
        min_value=1, max_value=20, value=5,
        help="–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä–æ—Å—Ç"
    )

elif model == "–ú–∞—Ç—Ä–∏—Ü–∞ –õ–µ—Å–ª–∏":
    n_age = st.sidebar.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤", 
        min_value=2, max_value=10, value=3
    )
    
    st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –õ–µ—Å–ª–∏")
    with st.sidebar.expander("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ñ–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"):
        fertility = [
            st.number_input(f"–§–µ—Ä—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ {i}", 
                          min_value=0.0, value=0.5, step=0.1)
            for i in range(n_age)
        ]
    
    with st.sidebar.expander("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è"):
        survival = [
            st.number_input(f"–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å {i}‚Üí{i+1}", 
                          min_value=0.0, max_value=1.0, value=0.8, step=0.05)
            for i in range(n_age-1)
        ]
    
    with st.sidebar.expander("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è"):
        N0_vec = [
            st.number_input(f"–ö–ª–∞—Å—Å {i}", min_value=0.0, value=10.0, step=1.0)
            for i in range(n_age)
        ]

elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è":
    st.sidebar.subheader("–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    base_model = st.sidebar.selectbox(
        "–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å", 
        ["–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç", "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞"]
    )
    repeats = st.sidebar.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤", 
        min_value=10, max_value=500, value=100
    )
    sigma = st.sidebar.slider(
        "–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (œÉ)", 
        min_value=0.0, max_value=1.0, value=0.2, step=0.05
    )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
st.sidebar.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
log_scale = st.sidebar.checkbox(
    "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞", 
    help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é —à–∫–∞–ª—É –¥–ª—è –æ—Å–∏ Y"
)
show_stats = st.sidebar.checkbox(
    "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
    value=True,
    help="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
)

# ================== –ó–ê–ü–£–°–ö –°–ò–ú–£–õ–Ø–¶–ò–ò ================== #

if st.sidebar.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", type="primary"):
    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è..."):
        try:
            if model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç":
                traj = simulate_logistic(**common_params, T=T)
                plot_and_export(traj, "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç", log_scale)
                
            elif model == "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞":
                traj = simulate_ricker(**common_params, T=T)
                plot_and_export(traj, "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞", log_scale)
                
            elif model == "–ú–∞—Ç—Ä–∏—Ü–∞ –õ–µ—Å–ª–∏":
                traj = simulate_leslie(N0_vec, fertility, survival, T)
                df = pd.DataFrame(
                    traj, 
                    columns=[f"–í–æ–∑—Ä–∞—Å—Ç {i}" for i in range(n_age)]
                )
                st.line_chart(df)
                
                # –ê–Ω–∞–ª–∏–∑ –º–∞—Ç—Ä–∏—Ü—ã –õ–µ—Å–ª–∏
                L = np.zeros((n_age, n_age))
                L[0, :] = fertility
                for i in range(1, n_age):
                    L[i, i-1] = survival[i-1]
                
                eigvals = np.linalg.eigvals(L)
                dominant = np.max(np.real(eigvals))
                st.write(f"**–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ:** {dominant:.3f}")
                
                if dominant > 1:
                    st.success("–ü–æ–ø—É–ª—è—Ü–∏—è —Ä–∞—Å—Ç–µ—Ç (Œª > 1)")
                elif dominant < 1:
                    st.error("–ü–æ–ø—É–ª—è—Ü–∏—è —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è (Œª < 1)")
                else:
                    st.info("–°—Ç–∞–±–∏–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è (Œª ‚âà 1)")
                
            elif model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–ø–∞–∑–¥—ã–≤–∞–Ω–∏–µ–º":
                traj = simulate_delay(**common_params, T=T, tau=tau)
                plot_and_export(traj, "–ú–æ–¥–µ–ª—å —Å –∑–∞–ø–∞–∑–¥—ã–≤–∞–Ω–∏–µ–º", log_scale)
                
            elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è":
                base_fn = simulate_logistic if base_model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç" else simulate_ricker
                results = simulate_stochastic(
                    base_fn, 
                    common_params['N0'], 
                    common_params['r'], 
                    common_params['K'], 
                    T,
                    sigma=sigma,
                    repeats=repeats
                )
                
                plot_and_export(results, "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è", log_scale)
                
                if show_stats:
                    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                    stats_df = pd.DataFrame({
                        'Mean': np.nanmean(results, axis=0),
                        'Std': np.nanstd(results, axis=0),
                        'Min': np.nanmin(results, axis=0),
                        'Max': np.nanmax(results, axis=0)
                    })
                    st.dataframe(stats_df.style.background_gradient(), use_container_width=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if 'traj' in locals() and traj is not None:
                if np.isnan(traj).any():
                    st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
                if (traj < 0).any():
                    st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏")
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")
            logger.exception("Simulation error")

# –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
st.sidebar.markdown("---")
st.sidebar.markdown("""
**–°–ø—Ä–∞–≤–∫–∞:**
- –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å: N‚Çú‚Çä‚ÇÅ = N‚Çú + rN‚Çú(1-N‚Çú/K)
- –ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞: N‚Çú‚Çä‚ÇÅ = N‚Çúexp[r(1-N‚Çú/K)]
""")
st.sidebar.caption("v1.2 | ¬© 2023 | –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Python –∏ Streamlit")
