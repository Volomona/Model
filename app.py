# --- —á–∞—Å—Ç—å –∫–æ–¥–∞ –¥–æ —ç—Ç–æ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è (–∏–º–ø–æ—Ä—Ç—ã, simulate_* –∏ export_csv) ---

# ==== Streamlit UI ==== #
st.set_page_config(page_title="Population Dynamics Simulator", layout="wide")
st.title("üå± –°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏")

model_info = {
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Å –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å—é K.",
    "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞": "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (–†–∏–∫–µ—Ä).",
    "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏": "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –º–∞—Ç—Ä–∏—Ü—É –õ–µ—Å–ª–∏.",
    "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π": "–ü–æ–ø—É–ª—è—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–¥–µ—Ä–∂–∫–∞ œÑ).",
    "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è": "–î–æ–±–∞–≤–ª—è–µ—Ç –≥–∞—É—Å—Å–æ–≤ —à—É–º –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∑–∞–ø—É—Å–∫–∞–º.",
}
st.sidebar.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ.")

model = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(model_info.keys()))
st.sidebar.caption(model_info[model])

st.sidebar.markdown("### –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
T = st.sidebar.number_input("–®–∞–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ (T)", min_value=1, max_value=500, value=100)

num_configs = 1
if model in ["–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç", "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞", "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π", "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è"]:
    num_configs = st.sidebar.slider("–ß–∏—Å–ª–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", min_value=1, max_value=5, value=2)

params_list = []

if model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
    n = st.sidebar.number_input("–ß–∏—Å–ª–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤", min_value=2, max_value=10, value=3)
    with st.sidebar.expander("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ (f_i)"):
        fertility = [st.number_input(f"f_{i}", min_value=0.0, value=0.5) for i in range(n)]
    with st.sidebar.expander("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è (s_i)"):
        survival = [st.number_input(f"s_{i}", min_value=0.0, max_value=1.0, value=0.8) for i in range(n-1)]
    with st.sidebar.expander("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –∫–ª–∞—Å—Å–∞–º"):
        N0_vec = [st.number_input(f"N0_{i}", min_value=0.0, value=10.0) for i in range(n)]

else:
    for i in range(num_configs):
        with st.sidebar.expander(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i + 1}"):
            N0 = st.number_input(f"N0 (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i + 1})", min_value=0.0, value=10.0, key=f"N0_{i}")
            r = st.number_input(f"r (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i + 1})", min_value=0.0, value=0.1, key=f"r_{i}")
            K = st.number_input(f"K (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i + 1})", min_value=1.0, value=100.0, key=f"K_{i}")
            tau = 1
            sigma = 0.1
            repeats = 100
            base_model = "Logistic"
            if model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
                tau = st.slider(f"œÑ (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i + 1})", min_value=1, max_value=10, value=1, key=f"tau_{i}")
            if model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
                sigma = st.slider(f"–®—É–º œÉ (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i + 1})", min_value=0.0, max_value=1.0, value=0.1, key=f"sigma_{i}")
                repeats = st.number_input(f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i + 1})", min_value=1, max_value=200, value=100, key=f"repeats_{i}")
                base_model = st.selectbox(f"–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i + 1})", ["Logistic", "Ricker"], key=f"base_model_{i}")
            params_list.append({
                "N0": N0, "r": r, "K": K, "tau": tau,
                "sigma": sigma, "repeats": repeats,
                "base_model": base_model
            })

if st.sidebar.button("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"):
    with st.spinner("–°–∏–º—É–ª—è—Ü–∏—è..."):
        if model == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
            history = simulate_leslie(N0_vec, fertility, survival, T)
            df = pd.DataFrame(history, columns=[f"–í–æ–∑—Ä–∞—Å—Ç {i}" for i in range(n)])
            st.subheader("–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏")
            st.line_chart(df)
            L = np.zeros((n, n)); L[0, :] = fertility
            for i in range(1, n): L[i, i-1] = survival[i-1]
            lambda_val = np.max(np.real(np.linalg.eigvals(L)))
            export_csv(history, 'leslie_matrix_data')
            st.write(f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Œª = {lambda_val:.3f}")

        else:
            st.subheader(f"{model} ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            all_trajectories = []

            for idx, config in enumerate(params_list):
                if model == "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç":
                    traj = simulate_logistic(config["N0"], config["r"], config["K"], T)
                elif model == "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞":
                    traj = simulate_ricker(config["N0"], config["r"], config["K"], T)
                elif model == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
                    traj = simulate_delay(config["N0"], config["r"], config["K"], T, config["tau"])
                elif model == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
                    base_sim = simulate_ricker if config["base_model"] == 'Ricker' else simulate_logistic
                    runs = simulate_stochastic(base_sim, config["N0"], config["r"], config["K"], T,
                                               sigma=config["sigma"], repeats=config["repeats"])
                    traj = runs.mean(axis=0)
                all_trajectories.append(traj)

            df_compare = pd.DataFrame({f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1}": traj[:T+1] for i, traj in enumerate(all_trajectories)})
            st.line_chart(df_compare)
            export_csv(df_compare, f"{model.replace(' ', '_')}_compare_data")

# Footer
st.sidebar.markdown("---")
st.sidebar.info("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –õ–∏–µ–π –ê—Ö–º–µ—Ç–æ–≤–æ–π ‚Äî v2.0 (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
