import sys
import io
import logging
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
from scipy.optimize import minimize
from SALib.sample import saltelli
from SALib.analyze import sobol
import pdfkit

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------------------
# Simulation functions
# -------------------------------
def simulate_logistic(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] + r * Ns[-1] * (1 - Ns[-1] / K))
    return np.array(Ns)

# ... (other simulate_* functions unchanged) ...

def simulate_ricker(N0: float, r: float, K: float, T: int) -> np.ndarray:
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] * np.exp(r * (1 - Ns[-1] / K)))
    return np.array(Ns)

# -------------------------------
# Analysis functions
# -------------------------------
def analyze_behavior(time_series: np.ndarray) -> str:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º: —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å, –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏–ª–∏ —Ö–∞–æ—Å.
    """
    std = np.std(time_series[-int(len(time_series)/2):])
    if std < 1e-3:
        return "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å"
    # –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π: –∑–Ω–∞—á–∏–º—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
    peaks = np.sum(np.diff(np.sign(np.diff(time_series))) < 0)
    if peaks > 5:
        return "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è"
    return "–•–∞–æ—Å"


def sensitivity_heatmap(model_func, param_ranges: dict, fixed_args: dict, T: int):
    """
    –°—Ç—Ä–æ–∏—Ç —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –∞–º–ø–ª–∏—Ç—É–¥—ã –æ—Ç –¥–≤—É—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    param_ranges: {'r': (0.1,1.0,10), 'K': (50,200,10)}
    """
    p1, p2 = list(param_ranges.keys())
    v1 = np.linspace(*param_ranges[p1])
    v2 = np.linspace(*param_ranges[p2])
    amp = np.zeros((len(v1), len(v2)))
    for i, x in enumerate(v1):
        for j, y in enumerate(v2):
            args = fixed_args.copy()
            args[p1], args[p2] = x, y
            ts = model_func(*args.values(), T)
            amp[i,j] = ts.max() - ts.min()
    fig, ax = plt.subplots()
    c = ax.pcolormesh(v1, v2, amp.T, shading='auto')
    fig.colorbar(c, ax=ax)
    ax.set_xlabel(p1)
    ax.set_ylabel(p2)
    return fig


def optimize_parameters(model_func, data: np.ndarray, initial_guess: list, bounds: list, T: int):
    """
    –ü–æ–¥–≥–æ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ –ø–æ MSE.
    initial_guess: [N0, r, K]
    bounds: [(0, None), (0, None), (0, None)]
    """
    def loss(params):
        sim = model_func(params[0], params[1], params[2], T)
        return np.mean((sim - data)**2)
    res = minimize(loss, initial_guess, bounds=bounds)
    return res


def generate_pdf_report(html_content: str, output_path: str = "report.pdf"):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –∏–∑ HTML —á–µ—Ä–µ–∑ pdfkit.
    """
    pdfkit.from_string(html_content, output_path)
    return output_path

# -------------------------------
# Streamlit UI
# -------------------------------
st.set_page_config(page_title="Population Dynamics Simulator", layout="wide")
st.title("üå± –°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏ —Å –ê–Ω–∞–ª–∏–∑–æ–º")

# Sidebar: –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
models = {
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç": simulate_logistic,
    "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞": simulate_ricker,
    # ... –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ ...
}
model_name = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(models.keys()))
model_func = models[model_name]

T = st.sidebar.slider("–®–∞–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ (T)", 10, 500, 100)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
if st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"):
    st.sidebar.markdown("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
    p1 = st.sidebar.selectbox("–ü–∞—Ä–∞–º–µ—Ç—Ä 1", ["r", "K"])
    p2 = st.sidebar.selectbox("–ü–∞—Ä–∞–º–µ—Ç—Ä 2", ["r", "K"])  
    v1_range = st.sidebar.slider(f"–î–∏–∞–ø–∞–∑–æ–Ω {p1}", 0.0, 2.0, (0.1,1.0), 0.1)
    v2_range = st.sidebar.slider(f"–î–∏–∞–ø–∞–∑–æ–Ω {p2}", 10.0, 500.0, (50.0,200.0), 10.0)

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
N0 = st.sidebar.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è N0", 0.0, 1000.0, 10.0)
r = st.sidebar.number_input("–¢–µ–º–ø —Ä–æ—Å—Ç–∞ r", 0.0, 5.0, 0.5)
K = st.sidebar.number_input("–ï–º–∫–æ—Å—Ç—å —Å—Ä–µ–¥—ã K", 1.0, 1000.0, 100.0)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏
uploaded = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV –¥–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", type=["csv"])

if st.sidebar.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é"):
    ts = model_func(N0, r, K, T)
    behavior = analyze_behavior(ts)
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
    st.line_chart(pd.DataFrame(ts, columns=["–ü–æ–ø—É–ª—è—Ü–∏—è"]))
    st.write(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏—è: {behavior}")

    # –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if '–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' in st.session_state:
        fig = sensitivity_heatmap(
            model_func,
            {p1: (v1_range[0], v1_range[1], 20), p2: (v2_range[0], v2_range[1], 20)},
            {'N0': N0, 'r': r, 'K': K},
            T
        )
        st.subheader("–ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∞–º–ø–ª–∏—Ç—É–¥–∞)")
        st.pyplot(fig)

    # –ü–æ–¥–≥–æ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if uploaded is not None:
        df = pd.read_csv(uploaded)
        data = df.iloc[:,1].values
        res = optimize_parameters(model_func, data, [N0, r, K], [(0,None),(0,None),(0,None)], T)
        st.subheader("–ü–æ–¥–≥–æ–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        st.write(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: N0={res.x[0]:.3f}, r={res.x[1]:.3f}, K={res.x[2]:.3f}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    if st.button("–°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á—ë—Ç"):
        html = st.experimental_get_query_params()  # —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å–±–æ—Ä–∫–∏ –æ—Ç—á—ë—Ç–∞
        path = generate_pdf_report(html)
        st.success(f"–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")

# –ö–æ–Ω–µ—Ü –∫–æ–¥–∞
