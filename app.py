import sys
import logging
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import g4f
from scipy.optimize import minimize
import pdfkit

# -------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------------------
# Simulation functions
# -------------------------------
def simulate_logistic(N0: float, r: float, K: float, T: int) -> np.ndarray:
    """–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞"""
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] + r * Ns[-1] * (1 - Ns[-1] / K))
    return np.array(Ns)

def simulate_ricker(N0: float, r: float, K: float, T: int) -> np.ndarray:
    """–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞"""
    Ns = [N0]
    for _ in range(T):
        Ns.append(Ns[-1] * np.exp(r * (1 - Ns[-1] / K)))
    return np.array(Ns)

def simulate_leslie(N0_vec: list, fertility: list, survival: list, T: int) -> np.ndarray:
    """–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –õ–µ—Å–ª–∏"""
    n = len(N0_vec)
    N = np.array(N0_vec, dtype=float)
    history = [N.copy()]
    L = np.zeros((n, n))
    L[0, :] = fertility
    for i in range(1, n):
        L[i, i-1] = survival[i-1]
    for _ in range(T):
        N = L.dot(N)
        history.append(N.copy())
    return np.array(history)

def simulate_delay(N0: float, r: float, K: float, T: int, tau: int) -> np.ndarray:
    """–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    Ns = [N0] * (tau + 1)
    for t in range(tau, T + tau):
        N_next = Ns[t] * np.exp(r * (1 - Ns[t - tau] / K))
        Ns.append(N_next)
    return np.array(Ns[:T + 1])

def simulate_stochastic(base_sim, *args, sigma: float = 0.1, repeats: int = 100) -> np.ndarray:
    """–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è"""
    runs = []
    progress = st.progress(0)
    for i in range(repeats):
        traj = base_sim(*args)
        noise = np.random.normal(0, sigma, size=traj.shape)
        runs.append(np.clip(traj + noise, 0, None))
        progress.progress((i + 1) / repeats)
    return np.array(runs)

# -------------------------------
# Export and Analysis
# -------------------------------
def export_csv(data: np.ndarray, filename: str, model_type: str, params_str: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–∫–∞—á–∞—Ç—å"""
    df = pd.DataFrame(data)
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ CSV",
        data=csv,
        file_name=f"{filename}.csv",
        mime="text/csv",
        key='download_csv'
    )

# -------------------------------
# Streamlit UI
# -------------------------------
st.set_page_config(page_title="Population Dynamics Simulator", layout="wide")
st.title("üå± –°–∏–º—É–ª—è—Ç–æ—Ä –ü–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π –î–∏–Ω–∞–º–∏–∫–∏")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'ts' not in st.session_state:
    st.session_state.ts = None
if 'model' not in st.session_state:
    st.session_state.model = None

# Sidebar: –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
models = {
    "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç": simulate_logistic,
    "–ú–æ–¥–µ–ª—å –†–∏–∫–µ—Ä–∞": simulate_ricker,
    "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏": simulate_leslie,
    "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π": simulate_delay,
    "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è": simulate_stochastic,
}
model_name = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(models.keys()))
T = st.sidebar.slider("–®–∞–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ (T)", 10, 500, 100)
N0 = st.sidebar.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–ø—É–ª—è—Ü–∏—è N0", 0.0, 1000.0, 10.0)
r = st.sidebar.number_input("–¢–µ–º–ø —Ä–æ—Å—Ç–∞ r", 0.0, 5.0, 0.5)
K = st.sidebar.number_input("–ï–º–∫–æ—Å—Ç—å —Å—Ä–µ–¥—ã K", 1.0, 1000.0, 100.0)

# –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
if model_name == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
    tau = st.sidebar.number_input("–ó–∞–¥–µ—Ä–∂–∫–∞ œÑ", 1, 10, 1)
elif model_name == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
    sigma = st.sidebar.number_input("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —à—É–º–∞ œÉ", 0.0, 1.0, 0.1)
    repeats = st.sidebar.number_input("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", 1, 200, 50)
elif model_name == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
    n = st.sidebar.number_input("–ö–ª–∞—Å—Å–æ–≤ (n)", 2, 10, 3)
    fertility = [st.sidebar.number_input(f"f_{i}", 0.0, 1.0, 0.5) for i in range(n)]
    survival = [st.sidebar.number_input(f"s_{i}", 0.0, 1.0, 0.8) for i in range(n-1)]
    N0_vec = [st.sidebar.number_input(f"N0_{i}", 0.0, 1000.0, 10.0) for i in range(n)]

# –ö–Ω–æ–ø–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
if st.sidebar.button("–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"):
    if model_name == "–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π":
        ts = models[model_name](N0, r, K, T, tau)
    elif model_name == "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è":
        ts = models[model_name](simulate_logistic, N0, r, K, T, sigma=sigma, repeats=repeats)
    elif model_name == "–ú–æ–¥–µ–ª—å –õ–µ—Å–ª–∏":
        ts = models[model_name](N0_vec, fertility, survival, T)
    else:
        ts = models[model_name](N0, r, K, T)
    st.session_state.ts = ts
    st.session_state.model = model_name

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if st.session_state.ts is not None:
    st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {st.session_state.model}")
    df_plot = pd.DataFrame(
        st.session_state.ts if st.session_state.ts.ndim == 1 else st.session_state.ts
    )
    st.line_chart(df_plot)

    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
    export_csv(
        st.session_state.ts,
        st.session_state.model.replace(" ", "_"),
        st.session_state.model,
        ""
    )

    # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ GPT-4
    if st.button("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑ GPT-4"):
        snippet = str(st.session_state.ts.flatten()[:10]) + "..."
        response = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4,
            messages=[{
                "role": "user",
                "content": (
                    f"–í—ã - –Ω–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏.\n"
                    f"–¢–∏–ø –º–æ–¥–µ–ª–∏: {st.session_state.model}\n"
                    f"–î–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 10 —Ç–æ—á–µ–∫): {snippet}"
                )
            }]
        )
        st.subheader("–ê–Ω–∞–ª–∏–∑ GPT-4:")
        st.write(response)

st.sidebar.markdown("---")
st.sidebar.info("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –õ–∏–µ–π –ê—Ö–º–µ—Ç–æ–≤–æ–π")
